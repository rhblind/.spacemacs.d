:DOC-CONFIG:
# Tangle by default to spacemacs.el, which is the most common case
#+property: header-args:emacs-lisp :tangle spacemacs.el
#+property: header-args:emacs-lisp :results silent
#+property: header-args: :mkdirp yes :comments no
#+startup: headlines
#+startup: nohideblocks
#+startup: noindent
#+options: toc:3 h:3
:END:

#+title: Emacs Configuration
#+subtitle: A life-long project
#+author: Rolf Håvard Blindheim
#+email: rhblind@gmail.com

* Table of Contents                                          :TOC_3:noexport:
- [[#references][References]]
- [[#prerequisites][Prerequisites]]
  - [[#ligatures][Ligatures]]
  - [[#icons][Icons]]
  - [[#server][Server]]
- [[#setup][Setup]]
  - [[#constants][Constants]]
  - [[#sneaky-garbage-collection][Sneaky Garbage Collection]]
  - [[#byte-compilation-blacklist][Byte Compilation (blacklist)]]
  - [[#emacs-daemon][Emacs Daemon]]
- [[#spacemacs][Spacemacs]]
  - [[#init][Init]]
  - [[#layers][Layers]]
  - [[#user-init][User Init]]
  - [[#user-config][User Config]]
- [[#personal-preferences---the-random-config-dumping-ground][Personal Preferences - The random config dumping ground]]
  - [[#scrolling][Scrolling]]
  - [[#globals][Globals]]
    - [[#shell-gpg-ssh-and-encryption][Shell, GPG, SSH and Encryption]]
  - [[#keyboard-and-bindings][Keyboard and bindings]]
- [[#project-management][Project Management]]
- [[#org-mode][Org Mode]]
- [[#local-variables][Local Variables]]

* References

Emacs configuration is mostly (for my part) stealing other peoples
configurations, mashing them together, crossing fingers and hoping that it
works. Here are some resources I have learnt a lot from.

- [[https://github.com/ralesi/spacemacs.org][GitHub - ralesi/spacemacs.org: Template for spacemacs config utilizing a stru...]]
- [[https://github.com/ekaschalk/.spacemacs.d][GitHub - ekaschalk/.spacemacs.d: My spacemacs configuration.]]
- [[https://github.com/zzamboni/dot-doom/blob/master/doom.org][dot-doom/doom.org at master · zzamboni/dot-doom · GitHub]]

Also, I should probably learn some elisp soon...

* Prerequisites
** Ligatures

    The ~pretty-fonts~ pkg requires the [[https://github.com/tonsky/FiraCode][Fira Code Symbol]] ([[https://github.com/tonsky/FiraCode/files/412440/FiraCode-Regular-Symbol.zip][download link]]) font
    installed. Any font can be used in-tandem, the link above is an extract of
    just the ligatures.

** Icons

    In the ~layers/display/packages.el~, I make heavy use of [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].
    The easiest way to install it is running ~M-x all-the-icons-install-fonts~.
    In that file you can customize which icons to include and change.

** Server

    If you want to use Emacs as a daemon, have ~server?~ true in the [[*Emacs Daemon][Emacs Daemon
    section]] of this file.

* Setup
This is an attempt at migrating my Emacs config to a literate config.

Ligatures and icons require installation - see README.
Layers are declared in `layers/config/layers.el'.

** Constants

We declare some "friendly named" constants to determine what operating system
we're currently on.

#+begin_src emacs-lisp
(defconst linux?   (eq system-type 'gnu/linux)                   "Are we on a linux machine?")
(defconst mac?     (eq system-type 'darwin)                      "Are we on a macOS machine?")
(defconst windows? (eq system-type 'windows-nt)                  "Are we on a windows machine?")
(defconst wsl?     (and (not (eq (getenv "WSLENV") nil)) linux?) "Are we on a wsl environment?")
#+end_src

** Sneaky Garbage Collection

For some reason, my GC'ing cause Emacs to freeze a lot while I'm working.
Found this little gem somewhere on the internet which seems to work quite good.

Defer garbage collection further back in the startup process.
This is reset by spacemacs (~dotspacemacs-gc-cons~) after Spacemacs has completed
loading.

#+begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

Adopt a sneaky garbage collection strategy of waiting until idle time to
collect; staving off the collector while the user is working.

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'(lambda ()
                                  (setq gcmh-idle-delay 5
                                        gcmh-high-cons-threshold (* 16 1024 1024)  ;; 16mb
                                        gcmh-verbose nil)))
#+end_src

** Byte Compilation (blacklist)

Gotta go fast! The native-comp branch of Emacs (will probably be merged in
Emacs 28) naively compiles lisp code once loaded. Not all libraries work too
well with this feature still, so we'll have a blacklist for where we can add
stuff that shouldn't be compiled.

#+begin_src emacs-lisp
(if (require 'comp nil t)
    (dolist (blacklist '(;; Add packages to this list to blacklist them from native compilation
                         ))
      (add-to-list 'comp-bootstrap-black-list blacklist)
      (add-to-list 'comp-deferred-compilation-black-list blacklist))
  (message "Library 'comp not found."))
#+end_src

** Emacs Daemon

Set ~true~ if you want to run the emacs daemon after starting up.

#+begin_src emacs-lisp
(defvar server? t
  "Alias `dotspacemacs-enable-server'. Set true if running emacs as a daemon")
#+end_src

* Spacemacs

This part of the configuration is specific for Spacemacs

** Init

#+begin_src emacs-lisp
(defun dotspacemacs/init ()
  """ All dotspacemacs- variables with values set different than their defaults.
They are all defined in ~/.emacs.d/core/core-dotspacemacs.el.
Check dotspacemacs/get-variable-string-list for all vars you can configure.
"""
  (setq-default
   ;; Display
   dotspacemacs-default-font `("Fira Code",
                               :size ,(if (= 1440 (display-pixel-height)) 15 13))
   dotspacemacs-themes       '(solarized-light
                               doom-one)
   ;; General
   dotspacemacs-auto-generate-layout-names t
   dotspacemacs-auto-resume-layouts        t
   dotspacemacs-editing-style              '(vim :variables
                                                 vim-style-visual-feedback t)
   dotspacemacs-elpa-https                 t
   dotspacemacs-elpa-subdirectory          nil
   dotspacemacs-enable-server              server?
   dotspacemacs-server-socket-dir          nil
   dotspacemacs-fullscreen-at-startup      nil
   dotspacemacs-folding-method             'origami
   dotspacemacs-large-file-size            5
   dotspacemacs-helm-use-fuzzy             'always
   dotspacemacs-line-numbers               '(
                                             :relative t
                                             :disabled-for-modes dired-mode doc-view-mode markdown-mode org-mode pdf-view-mode
                                             :size-limit-kb 5000)
   dotspacemacs-persistent-server          server?
   dotspacemacs-pretty-docs                t
   dotspacemacs-search-tools               '("rg" "ag" "pt" "ack" "grep")
   dotspacemacs-activate-smartparens-mode  t
   dotspacemacs-smartparens-strict-mode    t
   dotspacemacs-smart-closing-parenthesis  t
   dotspacemacs-remap-Y-to-y$              nil
   dotspacemacs-scratch-mode               'org-mode
   dotspacemacs-scroll-bar-while-scrolling nil
   dotspacemacs-startup-banner             'official
   dotspacemacs-startup-lists              nil
   dotspacemacs-whitespace-cleanup         'trailing
   dotspacemacs-distinguish-gui-tab        t
   dotspacemacs-install-packages           'used-only

   ;; The following are unchanged but are still required for reloading via
   ;; 'SPC f e R' `dotspacemacs/sync-configuration-layers' to not throw warnings
   dotspacemacs-emacs-leader-key  "M-m"
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-leader-key        "SPC"
   dotspacemacs-mode-line-theme   'all-the-icons))
#+end_src

** Layers

#+begin_src emacs-lisp
(defun dotspacemacs/layers ()
  "Instantiate Spacemacs layers declarations and package configurations."
  (setq-default
    dotspacemacs-configuration-layers     '((config   :location local)
                                            (display  :location local)
                                            (personal :location local))
    dotspacemacs-configuration-layer-path '("~/.spacemacs.d/layers/")
    dotspacemacs-additional-packages      '(counsel-dash
                                            doct
                                            doom-themes
                                            drag-stuff
                                            dtrt-indent
                                            evil-mc
                                            evil-string-inflection
                                            exec-path-from-shell
                                            exunit
                                            flycheck-credo
                                            flycheck-dialyxir
                                            forge
                                            gcmh
                                            k8s-mode
                                            live-py-mode
                                            lsp-ui
                                            org-fancy-priorities
                                            org-roam-ui
                                            org-super-agenda
                                            org-superstar
                                            pinentry
                                            polymode
                                            poetry
                                            rainbow-mode
                                            posframe
                                            yasnippet-snippets)
    dotspacemacs-frozen-packages          '()
    dotspacemacs-excluded-packages
    '(;; Must Exclude (for styling, functionality, bug-fixing reasons)
      fringe importmagic scss-mode vi-tilde-fringe

      ;; Packages I don't use (non-exhaustive)
      anzu centered-cursor-mode column-enforce-mode company-statistics
      doom-modeline eshell-prompt-extras evil-anzu evil-tutor
      fancy-battery fill-column-indicator gnuplot golden-ratio indent-guide
      iedit live-py-mode multi-term mwim neotree org-bullets paradox py-isort

      ;; Packages that is installed as a dependency of others, but I don't want installed
      alchemist)))
#+end_src

** User Init

For any functionality that should be loaded before layers are initialized, use
~:tangle user-init.el~. It will then be written to ~user-init.el~ and loaded by
this function.

#+begin_src emacs-lisp
(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  ;; tangle without actually loading org
  (let ((src (concat dotspacemacs-directory "spacemacs.org"))
        (ui (concat dotspacemacs-directory "user-init.el"))
        (uc (concat dotspacemacs-directory "user-config.el")))
    (when (or (file-newer-than-file-p src ui)
              (file-newer-than-file-p src uc))
      (call-process
       (concat invocation-directory invocation-name)
       nil nil t
       "-q" "--batch" "--eval" "(require 'ob-tangle)"
       "--eval" (format "(org-babel-tangle-file \"%s\")" src)))
    (if (file-exists-p ui) (load-file ui))))
#+end_src

** User Config

For any functionality that should be loaded after layers are initialized, use
~:tangle user-config.el~. It will then be written to ~user-config.el~ and loaded by
this function.

#+begin_src emacs-lisp
(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."
  (let ((uc (concat dotspacemacs-directory "user-config.el")))
    (if (file-exists-p uc) (load-file uc))))
#+end_src

* Personal Preferences - The random config dumping ground

Me

#+begin_src emacs-lisp
(setq user-full-name "Rolf Håvard Blindheim"
      user-email-address "rhblind@gmail.com")
#+end_src

Random stuff that doesn't fit into any particular category

#+begin_src emacs-lisp
(setq display-time-24hr-format t                     ;; I don't know the difference between AM and PM
      layouts-enable-autosave t                      ;; Automatically save layouts
      layouts-autosave-delay 1800                    ;; Save layouts every 30 minutes
      x-mouse-click-focus-ignore-position t          ;; Makes switching windows with mouse work on X-Window system
      vc-follow-symlinks nil                         ;; Don't follow symlinks, edit them directly
      newsticker-dir "~/.emacs.d/.cache/newsticker"  ;; I once had ambitions to read stuff...
      )
#+end_src

** Scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-follow-mouse t                          ;; Scroll window under mouse
      pixel-scroll-mode nil                               ;; Disable pixel scrolling - veeeeeeery slow
      mac-mouse-wheel-smooth-scroll nil                   ;; Probably too many pixels ;)
      mouse-wheel-progressive-speed nil                   ;; Don't accelerate scrolling
      mouse-wheel-scroll-amount '(1 ((shift) . 1)         ;; Mouse scroll 1 line at a time
                                    ((control) . nil))    ;; Hold ctrl to scroll to top/end of buffer
      scroll-step 1                                       ;; Keyboard scroll 1 line at the time
      scroll-preserve-screen-position t
      scroll-conservatively 100)
#+end_src

** Globals

Random stuff I want enabled no matter what!

#+begin_src emacs-lisp :tangle user-config.el
(fringe-mode 0)                                           ;; I don't like fringes
(global-company-mode)                                     ;; Enable company-mode(autocomplete) globally
(global-unset-key [down-mouse-1])                         ;; No dragging nonsense
(global-set-key [down-mouse-1] 'mouse-select-window)      ;; Select window with mouse click
(treemacs-resize-icons 14)                                ;; Slightly bigger Treemacs icons
(ws-butler-global-mode)                                   ;; Unobtrusive way to trim spaces on end of lines
#+end_src

Please don't quit Emacs every time I accidentally type ~:q~

#+begin_src emacs-lisp :tangle user-config.el
(evil-ex-define-cmd "q[uit]" 'evil-delete-buffer)         ;; Redefine :q to delete buffer instead of exiting emacs
#+end_src

*** Shell, GPG, SSH and Encryption

#+begin_src emacs-lisp :tangle user-init.el
(require 'epa-file)    ;; Load library for decrypting the `secrets.el.gpg' file
;; (setq epa-pinentry-mode 'loopback)  ;; Allows unlocking gpg keys using the Emacs minibuffer (gpg --> gpg-agent --> pinentry --> Emacs)
#+end_src

I'm usually on MacOS

#+begin_src emacs-lisp :tangle user-init.el
(when (eq system-type 'darwin)
  (setq shell-file-name "/bin/bash")
  (setq dired-listing-switches "-aBhl --group-directories-first"
        helm-locate-command "glocate %s -e -A --regex %s"
        helm-locate-recursive-dirs-command "glocate -i -e -A --regex '^%s' '%s.*$'"
        insert-directory-program "/usr/local/bin/gls")

  (custom-set-variables '(epg-gpg-program "/usr/local/bin/gpg")))
#+end_src

#+begin_src emacs-lisp :tangle user-config.el
(when (eq system-type 'darwin)
  (require 'exec-path-from-shell)
  (setq exec-path-from-shell-check-startup-files nil)  ;; Don't complain about putting thing in the wrong files
  (dolist (var '("LANG" "LC_TYPE" "GPG_AGENT_INFO" "SSH_AUTH_SOCK"))
    (add-to-list 'exec-path-from-shell-variables var))
  (exec-path-from-shell-initialize)
  (shell-command "gpg-connect-agent updatestartuptty /bye >/dev/null"))
#+end_src


But I used to be on Linux

#+begin_src emacs-lisp :tangle user-init.el
(when (eq system-type 'gnu/linux)
  (setq shell-file-name "/bin/bash"))
#+end_src

Either way, there's some things that always has to be done

#+begin_src emacs-lisp :tangle user-init.el
(epa-file-enable)
(setq auto-resume-layers t
      auth-source-debug  nil  ;; Enable logging of authentication related stuff to the `*Messages' buffer. Disable when not needed!
      custom-file        "~/.spacemacs.d/.custom-settings.el"
      secrets-file       "~/.spacemacs.d/secrets.el.gpg")

;; This file keeps secrets for emacs configurations
(load-file secrets-file)
#+end_src

** Keyboard and bindings

I need weird characters

#+begin_src emacs-lisp :tangle user-init.el
(require 'iso-transl)  ;; Enables "dead keys" for non-english keyboards
#+end_src

I don't really use this, but I'll just keep around for "later inspection"

#+begin_src emacs-lisp :tangle user-config.el
(when (and (boundp 'redo-bindings?) redo-bindings?
          (configuration-layer/package-used-p 'redo-spacemacs))
  (redo-spacemacs-bindings))
#+end_src

Some old habits are hard to unlearn. Got some keybindings that are too
hard-wired in my brains to even bother to change.

#+begin_src emacs-lisp
(global-set-key (kbd "<C-return>") 'newline-below)          ;; Ctrl-Enter inserts a new line below
(global-set-key (kbd "<S-return>") 'newline-above)          ;; Shift-Enter inserts a new line above
(global-set-key (kbd "<C-backspace>") 'backward-kill-word)  ;; Ctrl-Backspace deletes previous word
#+end_src

* Project Management

#+begin_src emacs-lisp
(setq projectile-enable-caching               t
      projectile-project-search-path          '("~/workspace")  ;; A relic directory from when I used Eclipse back in the days
      projectile-globally-ignored-files       '(".DS_Store")    ;; Super annoying files
      projectile-globally-ignored-directories '(".git"
                                                ".idea"
                                                ".import"
                                                ".elixir_ls"
                                                ".htmlcov"
                                                ".pytest_cache"
                                                "_build"
                                                "__pycache__"
                                                "deps"
                                                "node_modules"))
#+end_src

* Org Mode

I keep all my Org mode files in a Dropbox directory for easy sync and backup.

#+begin_src emacs-lisp
(setq org-directory          "~/Dropbox/org")
(setq org-roam-directory     (concat (file-name-as-directory org-directory) "roam")
      org-download-image-dir (concat (file-name-as-directory org-directory) "images")
      org-roam-v2-ack        t)
#+end_src

Should probably clean up this a bit - do I really need all these different
files?

#+begin_src emacs-lisp
(setq org-default-notes-file        (concat (file-name-as-directory org-directory) "misc.org")
      org-work-notes-file           (concat (file-name-as-directory org-directory) "work.org")
      org-projects-file             (concat (file-name-as-directory org-directory) "projects.org")
      org-roam-index-file           (concat (file-name-as-directory org-roam-directory) "index.org")
      org-agenda-files              (file-expand-wildcards (concat (file-name-as-directory org-directory) "*.org")))
#+end_src

Finally some other tweaks

#+begin_src emacs-lisp
(setq org-todo-keywords             '((sequence "TODO" "IN PROGRESS"
                                                "|"
                                                "DONE" "NEVERMIND"))
      org-use-property-inheritance  t
      org-log-done-with-time        t
      org-catch-invisible-edits     'smart
      org-babel-default-header-args '((:session . "none")
                                      (:results . "replace")
                                      (:exports . "code")
                                      (:cache   . "no")
                                      (:noweb   . "no")
                                      (:hlines  . "no")
                                      (:tangle  . "no")
                                      (:comment . "link")))
#+end_src

Make sure org-roam is available on startup

#+begin_src emacs-lisp :tangle user-config.el
(org-roam-db-autosync-mode)
#+end_src

* Local Variables :ARCHIVE:

This little block will cause the ~org-bable-tangle()~ function to run after this
file is saved.

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
