:DOC-CONFIG:
# Tangle by default to spacemacs.el, which is the most common case
#+property: header-args:emacs-lisp :tangle spacemacs.el
#+property: header-args:emacs-lisp :results silent
#+property: header-args: :mkdirp yes :comments no
#+startup: headlines
#+startup: nohideblocks
#+startup: noindent
#+startup: fold
#+options: toc:3 h:3
:END:

#+title: Emacs Configuration
#+subtitle: A life-long project
#+author: Rolf Håvard Blindheim
#+email: rhblind@gmail.com

This file is a work in progress, converting my old Emacs configuration to using
literate config.

* Table of Contents                                          :TOC_3:noexport:
- [[#references][References]]
- [[#prerequisites][Prerequisites]]
  - [[#ligatures][Ligatures]]
  - [[#icons][Icons]]
  - [[#server][Server]]
- [[#setup][Setup]]
  - [[#constants][Constants]]
  - [[#sneaky-garbage-collection][Sneaky Garbage Collection]]
  - [[#byte-compilation-blacklist][Byte Compilation (blacklist)]]
  - [[#emacs-frame][Emacs Frame]]
  - [[#emacs-daemon][Emacs Daemon]]
- [[#spacemacs][Spacemacs]]
  - [[#init][Init]]
  - [[#layers][Layers]]
    - [[#config-layer][Config Layer]]
    - [[#display-layer][Display Layer]]
  - [[#user-init][User Init]]
  - [[#user-config][User Config]]
- [[#personal-preferences---the-random-config-dumping-ground][Personal Preferences - The random config dumping ground]]
  - [[#scrolling][Scrolling]]
  - [[#globals][Globals]]
    - [[#shell-gpg-ssh-and-encryption][Shell, GPG, SSH and Encryption]]
  - [[#keyboard-and-bindings][Keyboard and bindings]]
- [[#packages][Packages]]
  - [[#org-mode][Org Mode]]
    - [[#exporting][Exporting]]
    - [[#org-babel][Org Babel]]
    - [[#org-projectile][Org Projectile]]
    - [[#org-roam][Org Roam]]
    - [[#declarative-org-capture-templates][Declarative Org Capture Templates]]
  - [[#projectile][Projectile]]
- [[#theming][Theming]]
  - [[#fonts][Fonts]]
  - [[#styling][Styling]]
    - [[#org][Org]]
    - [[#company][Company]]
    - [[#mode-line][Mode-Line]]
    - [[#font-locks][Font-Locks]]
  - [[#themes][Themes]]
    - [[#solarized-light][Solarized Light]]
    - [[#zenburn][Zenburn]]
    - [[#doom-one][Doom One]]
    - [[#set-modifications][Set Modifications]]
- [[#local-variables][Local Variables]]

* References

Emacs configuration is mostly (for my part) stealing from other peoples
configurations, mashing them together, crossing fingers and hoping that it
works. Here are some resources I have learned a lot from.

- [[https://github.com/ralesi/spacemacs.org][GitHub - ralesi/spacemacs.org: Template for spacemacs config utilizing a stru...]]
- [[https://github.com/ekaschalk/.spacemacs.d][GitHub - ekaschalk/.spacemacs.d: My spacemacs configuration.]]
- [[https://github.com/zzamboni/dot-doom/blob/master/doom.org][dot-doom/doom.org at master · zzamboni/dot-doom · GitHub]]

Also, I should probably learn some elisp soon...

* Prerequisites
** Ligatures

    The ~pretty-fonts~ pkg requires the [[https://github.com/tonsky/FiraCode][Fira Code Symbol]] ([[https://github.com/tonsky/FiraCode/files/412440/FiraCode-Regular-Symbol.zip][download link]]) font
    installed. Any font can be used in-tandem, the link above is an extract of
    just the ligatures.

** Icons

    In the ~layers/display/packages.el~, I make heavy use of [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].
    The easiest way to install it is running ~M-x all-the-icons-install-fonts~.
    In that file you can customize which icons to include and change.

** Server

    If you want to use Emacs as a daemon, have ~server?~ true in the [[*Emacs Daemon][Emacs Daemon
    section]] of this file.

* Setup
This is an attempt at migrating my Emacs config to a literate config.

Ligatures and icons require installation - see README.
Layers are declared in `layers/config/layers.el'.

** Constants

We declare some "friendly named" constants to determine what operating system
we're currently on.

#+begin_src emacs-lisp
(defconst linux?   (eq system-type 'gnu/linux)                   "Are we on a linux machine?")
(defconst mac?     (eq system-type 'darwin)                      "Are we on a macOS machine?")
(defconst windows? (eq system-type 'windows-nt)                  "Are we on a windows machine?")
(defconst wsl?     (and (not (eq (getenv "WSLENV") nil)) linux?) "Are we on a wsl environment?")
#+end_src

** Sneaky Garbage Collection

For some reason, my GC'ing cause Emacs to freeze a lot while I'm working.
Found this little gem somewhere on the internet which seems to work quite good.

Defer garbage collection further back in the startup process.
This is reset by spacemacs (~dotspacemacs-gc-cons~) after Spacemacs has completed
loading.

#+begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

Adopt a sneaky garbage collection strategy of waiting until idle time to
collect; staving off the collector while the user is working.

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'(lambda ()
                                  (setq gcmh-idle-delay 5
                                        gcmh-high-cons-threshold (* 16 1024 1024)  ;; 16mb
                                        gcmh-verbose nil)))
#+end_src

** Byte Compilation (blacklist)

Gotta go fast! The native-comp branch of Emacs (will probably be merged in
Emacs 28) naively compiles lisp code once loaded. Not all libraries work too
well with this feature still, so we'll have a blacklist for where we can add
stuff that shouldn't be compiled.

#+begin_src emacs-lisp
(if (require 'comp nil t)
    (dolist (blacklist '(;; Add packages to this list to blacklist them from native compilation
                         ))
      (add-to-list 'comp-bootstrap-black-list blacklist)
      (add-to-list 'comp-deferred-compilation-black-list blacklist))
  (message "Library 'comp not found."))
#+end_src

** Emacs Frame

This will raise the newly created Emacs frame (if running on macOS)

#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (when (featurep 'ns)
    (defun ns-raise-emacs ()
      "Raise Emacs."
      (ns-do-applescript "tell application \"Emacs\" to activate"))

    (defun ns-raise-emacs-with-frame (frame)
      "Raise Emacs and select the provided frame."
      (with-selected-frame frame
        (when (display-graphic-p)
          (ns-raise-emacs))))

    (add-hook 'after-make-frame-functions 'ns-raise-emacs-with-frame)

    ;; Set visual style for frame title bar
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . light))

    (when (display-graphic-p)
      (ns-raise-emacs))))
#+end_src

** Emacs Daemon

Set ~true~ if you want to run the emacs daemon after starting up.

#+begin_src emacs-lisp
(defvar server? t
  "Alias `dotspacemacs-enable-server'. Set true if running emacs as a daemon")
#+end_src

Then, this little script can be used to invoke Emacs:

#+begin_src shell :tangle ~/.local/bin/ec
#!/usr/bin/env zsh

if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
  emacsclient -a "" -t "$@"
else
  emacsclient -a "" -c "$@"
fi
#+end_src

The script creates an Emacs frame in the current terminal if it is called from
an SSH session, otherwise it creates a new GUI Emacs frame. Can ie. be saved to
~~/.local/bin/ec~ and set the ~EDITOR~ environment variable to point at it.

Some people like to have a dock icon to start Emacs Client. An easy solution is to use the Script Editor to create a script. Remember to switch the language to JavaScript, and use the following to call the shell script above:

#+begin_src javascript :tangle no
ObjC.import('stdlib');

function run(argv) {
  $.system('~/.local/bin/ec');
}
#+end_src

* Spacemacs

This part of the configuration is specific for Spacemacs

** Init

#+begin_src emacs-lisp
(defun dotspacemacs/init ()
  """ All dotspacemacs- variables with values set different than their defaults.
They are all defined in ~/.emacs.d/core/core-dotspacemacs.el.
Check dotspacemacs/get-variable-string-list for all vars you can configure.
"""
  (setq-default
   ;; Display
   dotspacemacs-default-font `("Fira Code",
                               :size ,(if (= 1440 (display-pixel-height)) 15 13))
   dotspacemacs-themes       '(solarized-light
                               doom-one)
   ;; General
   dotspacemacs-auto-generate-layout-names t
   dotspacemacs-auto-resume-layouts        t
   dotspacemacs-editing-style              '(vim :variables
                                                 vim-style-visual-feedback t)
   dotspacemacs-elpa-https                 t
   dotspacemacs-elpa-subdirectory          nil
   dotspacemacs-enable-server              server?
   dotspacemacs-server-socket-dir          nil
   dotspacemacs-fullscreen-at-startup      nil
   dotspacemacs-folding-method             'origami
   dotspacemacs-large-file-size            5
   dotspacemacs-helm-use-fuzzy             'always
   dotspacemacs-line-numbers               '(
                                             :relative t
                                             :disabled-for-modes dired-mode doc-view-mode markdown-mode org-mode pdf-view-mode
                                             :size-limit-kb 5000)
   dotspacemacs-persistent-server          server?
   dotspacemacs-pretty-docs                t
   dotspacemacs-search-tools               '("rg" "ag" "pt" "ack" "grep")
   dotspacemacs-activate-smartparens-mode  t
   dotspacemacs-smartparens-strict-mode    t
   dotspacemacs-smart-closing-parenthesis  t
   dotspacemacs-remap-Y-to-y$              nil
   dotspacemacs-scratch-mode               'org-mode
   dotspacemacs-scroll-bar-while-scrolling nil
   dotspacemacs-startup-banner             'official
   dotspacemacs-startup-lists              nil
   dotspacemacs-whitespace-cleanup         'trailing
   dotspacemacs-distinguish-gui-tab        t
   dotspacemacs-install-packages           'used-only

   ;; The following are unchanged but are still required for reloading via
   ;; 'SPC f e R' `dotspacemacs/sync-configuration-layers' to not throw warnings
   dotspacemacs-emacs-leader-key  "M-m"
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-leader-key        "SPC"
   dotspacemacs-mode-line-theme   'all-the-icons))
#+end_src

** Layers

Spacemacs relies heavily on layers. I'm not quite sure what's the best way to
migrate layer-specific packages out to a literate config, so here's a link to
the [[https://develop.spacemacs.org/doc/LAYERS.html][Spacemacs layer documentation]].

For the time being, I'll try to initialize layer packages and then maybe use the
~spacemacs|use-package-add-hook~ macro for configurations.

#+begin_src emacs-lisp
(defun dotspacemacs/layers ()
  "Instantiate Spacemacs layers declarations and package configurations."
  (setq-default
    dotspacemacs-configuration-layers     '((config   :location local)
                                            (display  :location local))
    dotspacemacs-configuration-layer-path '("~/.spacemacs.d/layers/")
    dotspacemacs-additional-packages      '(counsel-dash
                                            doct
                                            doom-themes
                                            drag-stuff
                                            dtrt-indent
                                            evil-mc
                                            evil-string-inflection
                                            exec-path-from-shell
                                            exunit
                                            flycheck-credo
                                            flycheck-dialyxir
                                            forge
                                            gcmh
                                            k8s-mode
                                            live-py-mode
                                            lsp-ui
                                            org-fancy-priorities
                                            org-roam-ui
                                            org-super-agenda
                                            org-superstar
                                            pinentry
                                            polymode
                                            poetry
                                            rainbow-mode
                                            posframe
                                            yasnippet-snippets)
    dotspacemacs-frozen-packages          '()
    dotspacemacs-excluded-packages
    '(;; Must Exclude (for styling, functionality, bug-fixing reasons)
      fringe importmagic scss-mode vi-tilde-fringe

      ;; Packages I don't use (non-exhaustive)
      anzu centered-cursor-mode column-enforce-mode company-statistics
      doom-modeline eshell-prompt-extras evil-anzu evil-tutor
      fancy-battery fill-column-indicator gnuplot golden-ratio indent-guide
      iedit live-py-mode multi-term mwim neotree org-bullets paradox py-isort

      ;; Packages that is installed as a dependency of others, but I don't want installed
      alchemist)))
#+end_src

Spacemacs relies heavily on the layers concept. I currently got two layers; one
for general stuff, and one for visual stuff.

These configurations are tangled to ~layers.el~ and ~packages.el~ in their
respective layer directories.

*** Config Layer

Configure Config layer. Break up in smaller sections.

**** Layers

#+begin_src emacs-lisp :tangle layers/config/layers.el
;;; -*- lexical-binding: t; -*-

(configuration-layer/declare-layers
 '(;; Core
   (auto-completion :variables
                    auto-completion-return-key-behavior 'complete
                    auto-completion-tab-key-behavior 'complete
                    auto-completion-idle-delay 0.2
                    auto-completion-private-snippets-directory nil
                    auto-completion-enable-snippets-in-popup t
                    auto-completion-enable-help-tooltip nil
                    auto-completion-use-company-box t
                    auto-completion-enable-sort-by-usage t)
   better-defaults
   (dash :variables
         dash-docs-docset-newpath (cond ((eq system-type 'gnu/linux) "~/.local/share/Zeal/Zeal/docsets")
                                        ((eq system-type 'darwin) "~/Library/Application Support/Dash/DocSets")))
   docker
   (multiple-cursors :variables
                     multiple-cursors-backend 'evil-mc)
   dap
   (lsp :variables
        lsp-use-lsp-ui t
        lsp-lens-enable t
        lsp-headerline-breadcrumb-enable nil
        lsp-ui-remap-xref-keybindings t
        lsp-navigation 'peek)
   git
   (ivy :variables
        ivy-extra-directories nil)
   imenu-list
   (org :variables
        org-enable-valign t
        org-enable-roam-support t
        org-enable-roam-protocol t
        org-enable-github-support t
        org-enable-reveal-js-support t
        org-want-todo-bindings t)
   (shell :variables
          close-window-with-terminal t
          shell-default-shell 'vterm
          shell-default-term-shell "/usr/local/bin/zsh"
          shell-environment-variable-completion t
          )
   (spell-checking :variables
                   spell-checking-enable-by-default t
                   enable-flyspell-auto-completion nil)
   (syntax-checking :variables
                    syntax-checking-enable-by-default t)
   (version-control :variables
                    version-control-diff-side 'left
                    version-control-global-margin t
                    version-control-diff-tool 'git-gutter)

   ;; Misc
   graphviz
   nginx
   (ranger :variables
           ranger-show-preview t
           ranger-show-literal nil
           ranger-show-hidded t
           ranger-cleanup-eagerly t
           ranger-ignored-extensions '("mkv" "iso" "mp4" "flv"))
   (ibuffer :variables
            ibuffer-group-buffers-by 'projects)
   (osx :variables
        osx-option-as 'meta
        osx-right-option-as 'none)
   (unicode-fonts :variables unicode-fonts-force-multi-color-on-mac t)

   ;; Markups
   csv
   (html :variables
         css-enable-lsp t
         css-indent-offset 2
         less-enable-lsp t
         scss-enable-lsp t
         html-enable-lsp t
         web-fmt-tool 'prettier
         web-mode-markup-indent-offset 2
         web-mode-css-indent-offset 2
         web-mode-code-indent-offset 2
         web-mode-attr-indent-offset 2)
   web-beautify
   (latex :variables
          latex-build-command "LaTex"
          latex-enable-folding t
          latex-enable-magic t)
   (markdown :variables
             markdown-command "/usr/local/bin/pandoc"
             markdown-live-preview-engine 'vmd)
   yaml
   (evil-snipe :variables evil-snipe-enable-alternate-f-and-t-behaviors t)
   ;; Languages
   (csharp :variables
           csharp-backend 'lsp)
   dotnet
   (elixir :variables
           elixir-backend 'lsp
           elixir-ls-path "~/.local/opt/elixir-ls")
   emacs-lisp
   (erlang :variables
           erlang-backend 'lsp)
   (go :variables
       go-format-before-save t
       go-use-golangci-lint t
       go-backend 'lsp)
   prettier
   ruby
   (typescript :variables
               typescript-backend 'lsp
               typescript-fmt-on-save t
               typescript-fmt-tool 'prettier
               typescript-indent-level 2
               typescript-linter 'eslint
               typescript-lsp-linter nil)
   (javascript :variables
               javascript-backend 'lsp
               javascript-lsp-linter nil
               javascript-disable-tern-port-files nil
               javascript-fmt-tool 'prettier
               javascript-fmt-on-save t
               javascript-repl `nodejs
               js-indent-level 2
               js2-basic-offset 2
               js2-include-node-externs t
               js2-mode-show-strict-warnings nil ;; js2-mode is sometimes confused by the type syntax when using lsp backend
               js2-mode-show-parse-errors nil    ;; js2-mode is sometimes confused by the type syntax when using lsp backend
               node-add-modules-path t)
   django
   (python :variables
           python-backend 'lsp
           python-lsp-server 'pyright
           python-pipenv-activate nil ;; using poetry.el for python
           python-test-runner '(pytest nose)
           python-save-before-test t
           python-formatter 'lsp
           python-spacemacs-indent-guess t)
   react
   ;; rust
   sql
   windows-scripts
   ))
#+end_src

**** Packages

#+begin_src emacs-lisp :tangle layers/config/packages.el
;;; Config Layer -*- lexical-binding: t; -*-
(setq config-packages '(;; Unowned Packages
                        aggressive-indent
                        auto-highlight-symbol
                        avy
                        csharp-mode
                        company
                        dap
                        drag-stuff
                        dtrt-indent
                        elixir-mode
                        eshell
                        evil
                        evil-mc
                        evil-string-inflection
                        flyspell
                        lsp-mode
                        ivy
                        magit
                        ;; org-roam
                        ;; org-projectile
                        python
                        ranger
                        vterm
                        writeroom-mode
                        web-mode
                        yasnippet-snippets

                        ;; Owned Packages
                        auto-dim-other-buffers
                        outshine  ; also configures `outline-mode'
                        s

                        ;; Local Packages
                        (dap-shell :location local) ; provides shell tasks for dap mode
                        ;; (redo-spacemacs :location local)
                        (ivy-todo :location local)
                        (outline-ivy :location local)))
#+end_src

***** Break up these
#+begin_src emacs-lisp :tangle layers/config/packages.el
;;;; Aggressive indent
(defun config/pre-init-aggressive-indent ()
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode))

;;;; Auto-highlight-symbol
(defun config/pre-init-auto-highlight-symbol ()
  (add-hook 'prog-mode 'auto-highlight-symbol-mode)
  (add-hook 'text-mode 'auto-highlight-symbol-mode))

;;;; Avy
(defun config/pre-init-avy ()
  (setq avy-timeout-seconds 0.35)

  ;; Trying out evil-snipe, which conflicts with this shortcut. Use C-j-j to trigger avy-goto-char-timer
  ;; (evil-global-set-key 'normal "s" 'avy-goto-char-timer)
  (bind-keys ("C-l" . evil-avy-goto-line)
             ("C-h" . avy-pop-mark)))


;;;; Csharp
(defun config/post-init-csharp-mode ()
  (setq omnisharp-server-executable-path "/usr/local/bin/omnisharp")

  (add-to-list 'auto-mode-alist '("\\.csproj\\'" . xml-mode))

;;;;; Mode hooks

  (add-hook 'csharp-mode-hook (lambda () (setq-local counsel-dash-docsets '("NET_Framework")
                                                     dash-at-point-docset "NET_Framework")))
  (add-hook 'csharp-mode-hook (lambda ()
                                (add-hook 'before-save-hook #'lsp-format-buffer nil t)
                                (add-hook 'before-save-hook #'delete-trailing-crlf))))

;;;; Company
(defun config/post-init-company ()
  (add-hook 'after-init-hook 'global-company-mode)

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-d") #'company-next-page)
    (define-key company-active-map (kbd "C-u") #'company-previous-page)

    (setq company-dabbrev-other-buffers nil
          company-dabbrev-ignore-case   nil
          company-dabbrev-downcase      nil))


;;;;; Company-box
  (use-package company-box
    :defer t
    :diminish
    :if (display-graphic-p)
    :defines company-box-icons-all-the-icons
    :hook (company-mode . company-box-mode)
    :custom
    (company-box-backends-colors nil)
    :config
    (with-no-warnings
      ;; Prettify icons
      (defun +company-box-icons--elisp-fn (candidate)
        (when (derived-mode-p 'emacs-lisp-mode)
          (let ((sym (intern candidate)))
            (cond ((fboundp  sym) 'ElispFunction)
                  ((featurep sym) 'ElispFeature)
                  ((facep    sym) 'ElispFace)
                  ((boundp   sym) 'ElispVariable)
                  ((symbolp  sym) 'Text)
                  (t .       nil)))))
      (advice-add #'company-box-icons--elisp :override #'+company-box-icons--elisp-fn))

    (when (and (display-graphic-p)
               (require 'all-the-icons nil t))
      (declare-function all-the-icons-faicon 'all-the-icons)
      (declare-function all-the-icons-material 'all-the-icons)
      (declare-function all-the-icons-octicon 'all-the-icons)
      (setq company-box-icons-all-the-icons
            `((Unknown       . ,(all-the-icons-material "find_in_page"             :face 'all-the-icons-purple))
              (Text          . ,(all-the-icons-material "text_fields"              :face 'all-the-icons-green))
              (Method        . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
              (Function      . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
              (Constructor   . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
              (Field         . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
              (Variable      . ,(all-the-icons-material "adjust"                   :face 'all-the-icons-blue))
              (Class         . ,(all-the-icons-material "class"                    :face 'all-the-icons-red))
              (Interface     . ,(all-the-icons-material "settings_input_component" :face 'all-the-icons-red))
              (Module        . ,(all-the-icons-material "view_module"              :face 'all-the-icons-red))
              (Property      . ,(all-the-icons-material "settings"                 :face 'all-the-icons-red))
              (Unit          . ,(all-the-icons-material "straighten"               :face 'all-the-icons-red))
              (Value         . ,(all-the-icons-material "filter_1"                 :face 'all-the-icons-red))
              (Enum          . ,(all-the-icons-material "plus_one"                 :face 'all-the-icons-red))
              (Keyword       . ,(all-the-icons-material "filter_center_focus"      :face 'all-the-icons-red))
              (Snippet       . ,(all-the-icons-material "short_text"               :face 'all-the-icons-red))
              (Color         . ,(all-the-icons-material "color_lens"               :face 'all-the-icons-red))
              (File          . ,(all-the-icons-material "insert_drive_file"        :face 'all-the-icons-red))
              (Reference     . ,(all-the-icons-material "collections_bookmark"     :face 'all-the-icons-red))
              (Folder        . ,(all-the-icons-material "folder"                   :face 'all-the-icons-red))
              (EnumMember    . ,(all-the-icons-material "people"                   :face 'all-the-icons-red))
              (Constant      . ,(all-the-icons-material "pause_circle_filled"      :face 'all-the-icons-red))
              (Struct        . ,(all-the-icons-material "streetview"               :face 'all-the-icons-red))
              (Event         . ,(all-the-icons-material "event"                    :face 'all-the-icons-red))
              (Operator      . ,(all-the-icons-material "control_point"            :face 'all-the-icons-red))
              (TypeParameter . ,(all-the-icons-material "class"                    :face 'all-the-icons-red))
              (Template      . ,(all-the-icons-material "short_text"               :face 'all-the-icons-green))
              (ElispFunction . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
              (ElispVariable . ,(all-the-icons-material "check_circle"             :face 'all-the-icons-blue))
              (ElispFeature  . ,(all-the-icons-material "stars"                    :face 'all-the-icons-orange))
              (ElispFace     . ,(all-the-icons-material "format_paint"             :face 'all-the-icons-pink)))
            company-box-icons-alist 'company-box-icons-all-the-icons))))

;;;; Dap
(defun config/post-init-dap ()
  (add-hook 'dap-stopped-hook (lambda (arg) (call-interactively #'dap-hydra))))  ;; Open a Hydra debug menu whenever hitting a breakpoint

(defun config/init-dap-shell ()
  (use-package dap-shell :defer t))

;;;; Drag-stuff
(defun config/post-init-drag-stuff ()
  (drag-stuff-global-mode t)
  (global-set-key (kbd "<C-up>") 'drag-stuff-up)
  (global-set-key (kbd "<C-down>") 'drag-stuff-down))

;;;; Dtrt-indent
(defun config/init-dtrt-indent ()
  (use-package dtrt-indent :defer t))

;;;; Eshell
(defun config/pre-init-eshell ()
  (spacemacs|use-package-add-hook eshell
    :post-init
    (evil-define-key '(normal insert) 'global (kbd "C-e") 'eshell-pop-eshell)))

;;;; Evil
(defun config/post-init-evil ()
  (setq evil-escape-key-sequence "jk")
  (setq evil-escape-unordered-key-sequence nil)

  (evil-global-set-key 'normal "Q" 'evil-execute-q-macro)
  (define-key evil-normal-state-map (kbd "C-S-u") 'evil-scroll-other-window-interactive)
  (define-key evil-normal-state-map (kbd "C-S-d") 'evil-scroll-other-window-down-interactive)
  (evil-define-key '(normal visual motion) 'global
    "H"  'evil-first-non-blank
    "L"  'evil-end-of-line-interactive
    "0"  'evil-jump-item)

  (advice-add 'evil-ex-search-next     :after 'evil-scroll-to-center-advice)
  (advice-add 'evil-ex-search-previous :after 'evil-scroll-to-center-advice))

;;;; Evil-MC
(defun config/post-init-evil-mc ()
  (add-hook 'prog-mode-hook 'turn-on-evil-mc-mode)
  (add-hook 'text-mode-hook 'turn-on-evil-mc-mode))

;;;; Evil-String-Inflection
(defun config/init-evil-string-inflection ()
  ;; Toggle between snake case, camel case and pascal case
  (use-package evil-string-inflection :defer t :ensure t)
  (define-key evil-normal-state-map "gC" 'evil-operator-string-inflection))

;;;; Flyspell
(defun config/post-init-flyspell ()
  (let ((langs '("english" "norsk")))
    (setq lang-ring (make-ring (length langs)))
    (dolist (elem langs) (ring-insert lang-ring elem)))

  (global-set-key (kbd "<f8>") 'cycle-ispell-languages))

;;;; LSP-mode
(defun config/post-init-lsp-mode ()
  (spacemacs|use-package-add-hook lsp-after-open-hook #'lsp-origami-try-enable))

;;;; Ivy
(defun config/pre-init-ivy ()
  (setq ivy-format-function 'ivy-format-function-arrow)
  (setq completion-in-region-function 'ivy-completion-in-region))

(defun config/post-init-ivy ()
  (setq ivy-height 20)

  (spacemacs/set-leader-keys "ai" 'ivy-resume)

  (bind-keys :map ivy-minibuffer-map
             ("C-l"        . ivy-avy)
             ("C-u"        . ivy-scroll-down-command)
             ("C-d"        . ivy-scroll-up-command)
             ("C-n"        . ivy-restrict-to-matches)
             ("C-y"        . ivy-yank-word)
             ("C-<return>" . ivy-call)
             ("C-SPC"      . ivy-dispatching-done)
             ("C-S-SPC"    . ivy-dispatching-call)))

;;;;; Ivy-todo
(defun config/init-ivy-todo ()
(use-package ivy-todo
  :init (progn (spacemacs/set-leader-keys "pO" 'ivy-todo/task-list))))

;;;; Magit
(defun config/post-init-magit ()
  (use-package forge
    :after magit
    :defer t
    :config
    (add-to-list 'forge-alist '("gitlab.intility.com" "gitlab.intility.com/api/v4" "gitlab.intility.com" forge-gitlab-repository))
    (setq gitlab.user "user")
    (when (string= system-type "darwin")
      (setq ghub-use-workaround-for-emacs-bug 'force))

    (define-key magit-mode-map (kbd "C-c C-c") 'forge-copy-url-at-point-as-kill))

  (bind-keys :map magit-mode-map
             ("M-1" . winum-select-window-1)
             ("M-2" . winum-select-window-2)
             ("M-3" . winum-select-window-3)
             ("M-4" . winum-select-window-4)))

;;;;; Org-Roam
;; (defun config/pre-init-org-roam ()
;;   (use-package org-roam-ui
;;     :after org-roam
;;     :config (setq org-roam-ui-sync-theme t
;;                   org-roam-ui-follow t
;;                   org-roam-ui-update-on-save t
;;                   org-roam-ui-open-on-start t))
;;   )


;; (defun config/post-init-org-roam ()
;;   (with-eval-after-load 'org-roam
;;     (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
;;       "Return the file TITLE for the node."
;;       (org-roam-get-keyword "TITLE" (org-roam-node-file node)))

;;     (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
;;       "Return the hierarchy for the node."
;;       (let ((title (org-roam-node-title node))
;;             (olp (org-roam-node-olp node))
;;             (level (org-roam-node-level node))
;;             (filetitle (org-roam-node-filetitle node)))
;;         (concat
;;          (if (> level 0) (concat filetitle " -> "))
;;          (if (> level 1) (concat (string-join olp " -> ") " -> "))
;;          title))
;;       )

;;     ;; Display node hierarchy in the org-roam-node-find list
;;     (setq org-roam-node-display-template "${hierarchy:*} ${tags:20}")

;;     ;; Encrypt org-roam files by default (NOTE does currently not work good with `org-roam-node-find' in v2)
;;     ;; (setq org-roam-capture-templates '(("d" "default" plain "%?"
;;     ;;                                     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org.gpg" "#+title: ${title}\n")
;;     ;;                                     :unnarrowed t)))

;;     ;; Allow mouse navigation in backlink buffer
;;     (define-key org-roam-mode-map [mouse-1] #'org-roam-visit-thing))

;;   ;; Use side window for backlink buffer
;;   (add-to-list 'display-buffer-alist
;;                '("\\*org-roam\\*"
;;                  (display-buffer-in-side-window)
;;                  (side . right)
;;                  (slot . 0)
;;                  (window-width . 0.25)
;;                  (preserve-size . (t nil))
;;                  (window-parameters . ((no-other-window . t)
;;                                        (no-delete-other-windows . t)))))
;;   )

;;;;; Org-projectile
;; (defun config/pre-init-org-projectile ()
;;   (use-package org-projectile
;;     :after org
;;     :config
;;     (progn
;;       (setq org-projectile-per-project-filepath "TODO.org"
;;             org-projectile-capture-template "* TODO %? %^G\n%i\n%a"
;;             org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
;;       (org-projectile-per-project))
;;     ))

;;;; Python
(defun config/pre-init-python ()
  (setenv "WORKON_HOME" "~/.local/share/virtualenvs")

  (spacemacs|use-package-add-hook pyenv
    :post-config
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3")))))

  (spacemacs|use-package-add-hook lsp-pyright
    :post-config
    (setq lsp-pyright-venv-directory (getenv "WORKON_HOME")))


;;;;; Debugging

  (require 'dap-hydra)
  (require 'dap-python)
  (add-hook 'python-mode-hook #'lsp-deferred)
  (add-hook 'python-mode-hook (lambda () (setq-local counsel-dash-docsets '("Python"))))

;;;;; Generic after loading python

  (with-eval-after-load 'python
    (setq python-shell-interpreter "python3")

    ;; TODO Figure out how to run poetry automatically when entering a python project.
    ;; FIXME This breaks python snippets in org-mode - should only apply for actual python projects
    ;; Still have to run poetry command manually once
    ;; (use-package poetry
    ;;   :ensure t
    ;;   :hook ((python-mode . poetry-tracking-mode)
    ;;          (python-mode . (lambda () (when (poetry-venv-exist-p) ;; FIXME This fails if run before poetry is initialized for project
    ;;                                      (setq-local lsp-pyright-venv-path poetry-project-venv))))))
    (custom-set-variables
     '(flycheck-python-flake8-executable "python3")
     '(flycheck-python-pycompile-executable "python3")
     '(flycheck-python-pylint-executable "python3"))

    (spacemacs/set-leader-keys-for-major-mode 'python-mode "p" 'poetry)))

;;;; Ranger
(defun config/pre-init-ranger ()
  (setq ranger-deer-show-details nil)

  (evil-global-set-key 'normal "_" 'ranger)

  ;; To get around `ranger/post-init-dired' overwriting keybindings
  (spacemacs|use-package-add-hook ranger
    :post-config
    (bind-keys :map ranger-mode-map
               ("n"   . dired-create-directory)
               ("E"   . wdired-change-to-wdired-mode)
               ("C-t" . ranger-travel)
               ("C-e" . ranger-pop-eshell)
               ("M-1" . winum-select-window-1)
               ("M-2" . winum-select-window-2)
               ("M-3" . winum-select-window-3)
               ("M-4" . winum-select-window-4)
               ("M-5" . winum-select-window-5))))

;;;; Vterm
(defun config/post-init-vterm ())

;;;; Writeroom-mode
(defun config/post-init-writeroom-mode ()
  "See configuration options here
   https://github.com/joostkremers/writeroom-mode"

  (setq writeroom-width 140)
  (with-eval-after-load 'writeroom-mode
    (define-key writeroom-mode-map (kbd "C-<") #'writeroom-decrease-width)
    (define-key writeroom-mode-map (kbd "C->") #'writeroom-increase-width)
    (define-key writeroom-mode-map (kbd "C-=") #'writeroom-adjust-width))

  ;; Recalculate margins after text size adjustment
  (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))

;;;; Yasnippet
(defun config/post-init-yasnippet-snippets ()
  (add-to-list 'yas-snippet-dirs 'yasnippet-snippets-dir t)
  (define-key prog-mode-map (kbd "C-c C-i") 'yas-insert-snippet))

;;; Owned Packages
;;;; Auto Dim Other Buffers
(defun config/init-auto-dim-other-buffers ()
  (use-package auto-dim-other-buffers
    :config
    (auto-dim-other-buffers-mode)))

;;;; Outshine
(defun config/init-outshine ()
  (use-package outshine
    :defer t
    :hook ((prog-mode          . outline-minor-mode)
           (outline-minor-mode . outshine-mode))

    :bind (("<backtab>"           . outshine-cycle-buffer)
           ([(meta return)]       . outshine-insert-heading)
           ([(meta shift return)] . outshine-insert-subheading)
           :map outline-minor-mode-map)

    :init
    (progn
      (evil-define-key '(normal visual motion) outline-minor-mode-map
        "gh" 'outline-up-heading
        "gj" 'outline-forward-same-level
        "gk" 'outline-backward-same-level
        "gl" 'outline-next-visible-heading
        "gu" 'outline-previous-visible-heading)

      (spacemacs/set-leader-keys
        "nn" 'outshine-narrow-to-subtree
        "nw" 'widen
        "nj" 'outline-move-subtree-down
        "nk" 'outline-move-subtree-up
        "nh" 'outline-promote
        "nl" 'outline-demote)

      (advice-add 'outshine-narrow-to-subtree :before 'outshine-fix-narrow-pos)

      (advice-add 'outshine-insert-heading    :before 'outshine-fix-insert-pos)
      (advice-add 'outshine-insert-heading    :after 'evil-insert-advice)
      (advice-add 'outshine-insert-subheading :after 'evil-insert-advice)

      ;; Fix the new bindings in outline-minor-mode overwriting org-mode-map
      ;; I also add advice here because it mirrors outshine modifications
      (spacemacs|use-package-add-hook org
        :post-config
        (progn
          (bind-keys :map org-mode-map
                     ;; ("C-j"                 . counsel-outline)
                     ("C-j"                 . oi-jump)
                     ([(meta return)]       . org-meta-return)
                     ([(meta shift return)] . org-insert-subheading))
          (advice-add 'org-insert-heading    :before 'org-fix-heading-pos)
          (advice-add 'org-insert-heading    :after 'evil-insert-advice)
          (advice-add 'org-insert-subheading :after 'evil-insert-advice)))
      )))

;;;; Strings
(defun config/init-s ()
  (use-package s :defer t))

;;; Local Packages
;;;; Redo-spacemacs
;; `redo-spacemacs-bindings' is executed in user-config in `init.el'
;; with the `dotspacemacs/user-config/post-layer-load-config' function

;; If any removed bindings make you scratch your head, check out
;; the ending `redo-spacemacs-new-bindings-alist' to see what I rebound it
;; to (for example, `spacemacs/delete-window' from 'SPC w d' to 'M-d')
;; They are unbound to force muscle-memory development.

;; (defun config/init-redo-spacemacs ()
;;   (use-package redo-spacemacs
;;     :if (and (boundp 'redo-bindings?) redo-bindings?)
;;     :init
;;     (progn
;;       (setq redo-spacemacs-prefixes-list
;;             '(;; Primary prefixes
;;               "C"    ; capture/colors
;;               "i"    ; insertion
;;               "j"    ; jump/join/split
;;               "N"    ; navigation
;;               "r"    ; registers/rings/resume
;;               "t"    ; toggles
;;               "z"    ; zoom

;;               ;; Sub prefixes
;;               "a s"  ; shells
;;               "b N"  ; new buffers
;;               "f v"  ; file/dir-local-variables
;;               "f C"  ; files/convert
;;               "p $"  ; projects/shell
;;               "s k"  ; search/ack
;;               "s r"  ; search/ripgrep
;;               "s t"  ; search/pt
;;               "w p"  ; windows/popup
;;               "x d"  ; text/delete
;;               "x g"  ; text/google-translate
;;               "x j"  ; text/justification
;;               "x t"  ; text/transposition
;;               "x w"  ; text/words
;;               ))

;;       (setq redo-spacemacs-undo-bindings-alist
;;             '(;; Top-level
;;               ("!" shell-command)
;;               ("'" spacemacs/default-pop-shell)
;;               ("0" neotree-show)
;;               ("?" counsel-descbinds)
;;               ("`" winum-select-window-by-number)
;;               ("1" winum-select-window-1)
;;               ("2" winum-select-window-2)
;;               ("3" winum-select-window-3)
;;               ("4" winum-select-window-4)
;;               ("5" winum-select-window-5)
;;               ("6" winum-select-window-6)
;;               ("7" winum-select-window-7)
;;               ("8" winum-select-window-8)
;;               ("9" winum-select-window-9)

;;               ;; A - applications
;;               ("ad" deer)
;;               ("ar" ranger)

;;               ;; B - buffers
;;               ("b." spacemacs/buffer-transient-state/body)
;;               ("bB" spacemacs-layouts/non-restricted-buffer-list-ivy)
;;               ("bD" spacemacs/ace-kill-this-buffer)
;;               ("bh" spacemacs/home
;;                spacemacs/switch-to-help-buffer)
;;               ("bH" spacemacs/switch-to-help-buffer)
;;               ("be" spacemacs/safe-erase-buffer)
;;               ("bb" ivy-switch-buffer
;;                ibuffer)
;;               ("bI" ibuffer)
;;               ("bn" next-buffer)
;;               ("bp" previous-buffer)
;;               ("bP" spacemacs/copy-clipboard-to-whole-buffer)
;;               ("bR" spacemacs/safe-revert-buffer)
;;               ("bw" read-only-mode)
;;               ("bW" spacemacs/goto-buffer-workspace)
;;               ("bY" spacemacs/copy-whole-buffer-to-clipboard)
;;               ("b C-d"   spacemacs/kill-other-buffers)
;;               ("b C-S-d" spacemacs/kill-matching-buffers-rudely)

;;               ;; c - compile/comments
;;               ("cl" spacemacs/comment-or-uncomment-lines)
;;               ("cL" spacemacs/comment-or-uncomment-lines-inverse)
;;               ("cP" spacemacs/comment-or-uncomment-paragraphs-inverse)
;;               ("cT" spacemacs/quick-comment-or-uncomment-to-the-line-inverse)
;;               ("cY" spacemacs/copy-and-comment-lines-inverse)

;;               ;; e - errors
;;               ;; ... Haven't went through yet ...

;;               ;; F - frames
;;               ("Fb" spacemacs/switch-to-buffer-other-frame)
;;               ("FB" spacemacs/display-buffer-other-frame)
;;               ("FD" delete-other-frames)
;;               ("Ff" spacemacs/find-file-other-frame)
;;               ("Fn" make-frame)
;;               ("FO" spacemacs/dired-other-frame)

;;               ;; f - files
;;               ("fA" spacemacs/find-file-and-replace-buffer)
;;               ("fb" counsel-bookmark)
;;               ("fE" spacemacs/sudo-edit)
;;               ("fg" rgrep)
;;               ("fh" hexl-find-file)
;;               ("fi" spacemacs/insert-file)
;;               ("fJ" spacemacs/open-junk-file)
;;               ("fj" dired-jump)
;;               ("fl" find-file-literally)
;;               ("fL" counsel-locate)

;;               ;; g - git/version-control
;;               ;; ... Haven't went through yet ...

;;               ;; h - help
;;               ;; ... Haven't went through yet ...

;;               ;; i - insertion
;;               ;; Removed entire leader

;;               ;; j - jump/join/split
;;               ;; Removed entire leader

;;               ;; k - lisp
;;               ;; Removed entire leader (I always use transient state for these)

;;               ;; N - navigation
;;               ;; Removed entire leader

;;               ;; n - narrow/numbers
;;               ("n+" spacemacs/evil-numbers-transient-state/evil-numbers/inc-at-pt)
;;               ("np" narrow-to-page)
;;               ("nr" narrow-to-region)

;;               ;; p - projects
;;               ("p%" projectile-replace-regexp)
;;               ("pe" projectile-edit-dir-locals)
;;               ("pF" projectile-find-file-dwim)
;;               ("pR" projectile-replace)
;;               ("pT" projectile-test-project)
;;               ("pv" projectile-vc)

;;               ;; q - quit
;;               ("qs" spacemacs/save-buffers-kill-emacs)
;;               ("qt" spacemacs/restart-emacs-adv-timers)

;;               ;; r - registers/rings/resume
;;               ;; Removed entire leader

;;               ;; s - search/symbol
;;               ("sf" spacemacs/search-auto)
;;               ("sF" spacemacs/search-auto-region-or-symbol)
;;               ("sj" spacemacs/counsel-jump-in-buffer)
;;               ("sp" spacemacs/search-project-auto)
;;               ("sP" spacemacs/search-project-auto-region-or-symbol)
;;               ("ss" swiper)
;;               ("sS" spacemacs/swiper-region-or-symbol)

;;               ;; T - UI toggles/themes
;;               ;; Leaving unchanged

;;               ;; t - toggles
;;               ;; Removed entire leader

;;               ;; w - windows
;;               ("w+" spacemacs/window-layout-toggle)
;;               ("w1" spacemacs/window-split-single-column)
;;               ("w2" spacemacs/window-split-double-columns)
;;               ("w3" spacemacs/window-split-triple-columns)
;;               ("w_" spacemacs/maximize-horizontally)
;;               ("wC" spacemacs/toggle-distraction-free)
;;               ("wc" spacemacs/toggle-centered-buffer)
;;               ("wF" make-frame)
;;               ("wh" evil-window-left)
;;               ("wj" evil-window-down)
;;               ("wk" evil-window-up)
;;               ("wl" evil-window-right)
;;               ("ws" split-window-below)
;;               ("wS" split-window-below-and-focus)
;;               ("wv" split-window-right)
;;               ("wV" split-window-right-and-focus)
;;               ("ww" other-window
;;                ace-window)
;;               ("wx" kill-buffer-and-window)
;;               ("wW" ace-window)
;;               ("w|" spacemacs/maximize-vertically)
;;               ("w <down>"    evil-window-down)
;;               ("w <up>"      evil-window-up)
;;               ("w <left>"    evil-window-left)
;;               ("w <right>"   evil-window-right)
;;               ("w <S-down>"  evil-window-move-very-bottom)
;;               ("w <S-up>"    evil-window-move-very-top)
;;               ("w <S-left>"  evil-window-move-far-left)
;;               ("w <S-right>" evil-window-move-far-right)

;;               ;; x - text
;;               ("x TAB" indent-rigidly)
;;               ("xJ" spacemacs/move-text-transient-state/move-text-down)
;;               ("xK" spacemacs/move-text-transient-state/move-text-up)
;;               ("xo" link-hint-open-link)
;;               ("xO" link-hint-open-multiple-links)

;;               ;; z - zoom
;;               ;; Removed entire leader

;;               ;; Important bindings that I use chords for now.
;;               ;; They are removed to force muscle-memory.
;;               ("v" er/expand-region)
;;               ("wm" spacemacs/toggle-maximize-buffer)
;;               ("wd" spacemacs/delete-window)
;;               ("w/" split-window-right)
;;               ("w-" split-window-below)
;;               ("ff" counsel-find-file)
;;               ("fr" counsel-recentf)
;;               ))

;;       (setq redo-spacemacs-new-bindings-alist
;;             '(;; Windows, Layouts Management
;;               ("M-w"   spacemacs/toggle-maximize-buffer)
;;               ("M-d"   spacemacs/delete-window)
;;               ("M-c"   spacemacs/toggle-centered-buffer-mode)
;;               ("M-/"   split-window-right)
;;               ("C-M-/" split-window-right-and-focus)
;;               ("M--"   split-window-below)
;;               ("C-M--" split-window-below-and-focus)
;;               ("M-1" winum-select-window-1)
;;               ("M-2" winum-select-window-2)
;;               ("M-3" winum-select-window-3)
;;               ("M-4" winum-select-window-4)
;;               ("M-5" winum-select-window-5)

;;               ;; Editing, Searching, Movement
;;               ("C-,"   lisp-state-toggle-lisp-state)
;;               ("C-SPC" er/expand-region)
;;               ("C-S-s" spacemacs/swiper-region-or-symbol)

;;               ;; Files, Buffers
;;               ("M-f" counsel-find-file)
;;               ("M-r" counsel-recentf)

;;               ;; Rebindings to look at
;;               ;; spacemacs/kill-this-buffer
;;               ;; M-u, M-i
;;               )))))

#+end_src

***** Outline-Ivy

#+begin_src emacs-lisp :tangle layers/config/packages.el
(defun personal/init-outline-ivy ()
  (use-package outline-ivy
    :defer t
    :bind (:map outline-minor-mode-map ("C-j" . oi-jump))))
#+end_src

***** Elixir-mode

#+begin_src emacs-lisp :tangle layers/config/packages.el
(defun config/post-init-elixir-mode ()

;;;; Error handling

  (with-eval-after-load 'flycheck
    '(flycheck-credo-setup)
    '(flycheck-dialyxir-setup))
  (with-eval-after-load 'lsp-ui
    '(flycheck-add-next-checker 'lsp-ui 'elixir-credo))
  (with-eval-after-load 'elixir-mode
    (add-hook 'elixir-mode-hook #'flycheck-mode))

;;;; Keybindings

  ;; Set up some custom keybindings that's not automatically configured using elixir-mode
  (with-eval-after-load 'elixir-mode
    (spacemacs/declare-prefix-for-mode 'elixir-mode
      "mt" "test" "testing related functionality")
    (spacemacs/set-leader-keys-for-major-mode 'elixir-mode
      "tb" 'exunit-verify-all
      "ta" 'exunit-verify
      "tl" 'exunit-rerun
      "tt" 'exunit-verify-single
      "tu" 'exunit-verify-all-in-umbrella
      "hd" 'dash-at-point
      "hD" 'dash-at-point-with-docset))

;;;; Debugging

  ;; Register your debug run configurations here
  ;; (see dap-elixir for defaults injected into the "Elixir" type)
  (require 'dap-hydra)
  (require 'dap-elixir)
  (with-eval-after-load 'dap-mode
    ;; (dap--put-if-absent :type "shell")
    ;; Task for running a Phoenix Server
    (dap-register-debug-template "Elixir Phoenix Server"
                                 (list :name "Elixir::Phoenix Server"
                                       :type "Elixir"
                                       :task "phx.server"
                                       :request "launch"
                                       :program nil
                                       :cwd nil  ;; defaults to lsp-workspace-root
                                       ))

    ;; Task for running an interactive mix session
    (dap-register-debug-template "Elixir Interactive Shell"
                                 (list :name "Elixir::Interactive Shell"
                                       :type "shell"
                                       :command "iex"
                                       :taskArgs (list "-S")
                                       :task "mix"
                                       :request "launch"
                                       :program nil
                                       :cwd nil)))

;;;; Mode hooks
  ;; FIXME This messes with lsp-formatting and other stuff
  ;; Use polymode to enable syntax highlighting for inline HTML templates
  ;; (use-package polymode
  ;;   :mode ("\.ex" . poly-elixir-web-mode)
  ;;   :hook (elixir-mode . poly-elixir-web-mode)
  ;;   :config
  ;;   (define-hostmode poly-elixir-hostmode :mode 'elixir-mode)
  ;;   (define-innermode poly-liveview-expr-elixir-innermode
  ;;     :mode 'web-mode
  ;;     :head-matcher (rx line-start (* space) "~H" (= 3 (char "\"'")) line-end)
  ;;     :tail-matcher (rx line-start (* space) (= 3 (char "\"'")) line-end)
  ;;     :head-mode 'host
  ;;     :tail-mode 'host
  ;;     :allow-nested nil
  ;;     :keep-in-mode 'host
  ;;     :fallback-mode 'host)
  ;;   (define-polymode poly-elixir-web-mode
  ;;     :hostmode 'poly-elixir-hostmode
  ;;     :innermodes '(poly-liveview-expr-elixir-innermode)))

  ;; Auto-highlight symbols
  (add-hook 'elixir-mode-hook 'auto-highlight-symbol-mode)

  ;; Enable Dash documentation
  (add-hook 'elixir-mode-hook (lambda () (setq-local counsel-dash-docsets '("Elixir")
                                                     dash-at-point-docset "elixir")))
  ;; Format buffer on save
  (add-hook 'elixir-mode-hook (lambda () (add-hook 'before-save-hook #'lsp-format-buffer nil t)))

  ;; Try to delete all tabs - NOTE does not quite work as intended
  (add-hook 'elixir-mode-hook (lambda () (untabify (point-min) (point-max))))

  ;; Set custom settings for elixir-ls language server
  (add-hook 'lsp-after-initialize-hook (lambda () (lsp-register-custom-settings '(("elixirLS.projectDir" lsp-elixir-project-dir)))))

  ;; Add some ignore patterns for stuff I don't care about
  (add-hook 'lsp-mode-hook (lambda ()
                             (dolist (ignore-pattern '("[/\\\\]\\.elixir_ls$" "[/\\\\]\\.log$" "[/\\\\]_build$" "[/\\\\]deps$"))
                               (add-to-list 'lsp-file-watch-ignored ignore-pattern)))))
#+end_src

***** Web-mode

#+begin_src emacs-lisp :tangle layers/config/packages.el
(defun config/pre-init-web-mode ()
  "Various changes to how web-mode (and minors) should work"

  ;; Workaround for emacs lockfiles causing node to crash
  ;; https://github.com/facebook/create-react-app/issues/9056#issuecomment-633540572
  (dolist (mode-hook '(web-mode-hook
                       css-mode-hook
                       scss-mode-hook
                       rjsx-mode-hook
                       typescript-mode-hook
                       javascript-mode-hook))
    (add-hook mode-hook (lambda () (setq-local create-lockfiles nil))))

  ;; Disable smartparens strict mode in order to be able to write out
  ;; arrow functions like ie. `() => {...}'
  (dolist (mode-hook '(rjsx-mode-hook
                       typescript-mode-hook
                       typescript-tsx-mode-hook
                       javascript-mode-hook))
    (add-hook mode-hook 'turn-off-smartparens-strict-mode)))
#+end_src

After web-mode is initialized, set up some debugging tools.

#+begin_src emacs-lisp :tangle layers/config/packages.el
(defun config/post-init-web-mode ()
  (add-hook 'typescript-mode-hook (lambda ()
                                    (require 'dap-hydra)
                                    (require 'dap-node)
                                    (require 'dap-chrome)
                                    (dap-node-setup)))

  ;; TODO This need some more work
  ;; (with-eval-after-load 'dap-mode
  ;;   (dap-register-debug-template "React Debugging (Chrome)"
  ;;                                (list :name "Chrome::React Debugging"
  ;;                                      :type "pwa-chrome"
  ;;                                      :request "launch"
  ;;                                      :url "http://localhost:3000"
  ;;                                      :webRoot "${workspaceFolder}"
  ;;                                      :program nil
  ;;                                      :cwd nil)))
  )
#+end_src

*** Display Layer
**** Layers

#+begin_src emacs-lisp :tangle layers/display/layers.el
;;; -*- lexical-binding: t; -*-

(configuration-layer/declare-layers
 '(theming)) ;; Required for theming modifications
#+end_src

**** Packages

#+begin_src emacs-lisp :tangle layers/display/packages.el
;;; Display Layer -*- lexical-binding: t; -*-

(setq display-packages
      '(;; Owned packages
        all-the-icons
        all-the-icons-ivy
        ;; pretty-mode

        git-gutter
        git-gutter-fringe

        org-fancy-priorities
        org-super-agenda
        org-superstar

        (prettify-utils :location (recipe :fetcher github
                                          :repo "Ilazki/prettify-utils.el"))

        ;; Elsehwere-owned packages
        spaceline-all-the-icons
        which-key

        ;; Personal display-related packages
        ;; (pretty-code     :location local)
        ;; (pretty-eshell   :location local)
        (pretty-fonts    :location local)
        (pretty-magit    :location local)
        (pretty-outlines :location local)))
#+end_src

***** Break up these

#+begin_src emacs-lisp :tangle layers/display/packages.el

;;;; Pretty-mode

(defun display/init-pretty-mode ()
  ;; I *only* use greek letter replacements at the moment.
  ;; However, I go back and forht on whether to use nil-like <-> emptyset.
  ;; I currently have it *enabled*. Uncomment the deactivation to remove it.

  (use-package pretty-mode
    :config
    (progn
      (global-pretty-mode t)

      (pretty-deactivate-groups
       '(:equality :ordering :ordering-double :ordering-triple
                   :arrows :arrows-twoheaded :punctuation
                   :logic :sets
                   ;; :nil
                   ))
      (pretty-activate-groups
       '(:greek)))))

;;;; Prettify-utils

(defun display/init-prettify-utils ()
  (use-package prettify-utils))

;;;; Solarized-theme

;; (defun display/init-solarized-theme ()
;;   (use-package solarized-theme))

;;; Unowned Packages
;;;; Which-key

(defun display/post-init-which-key ()
  (when (configuration-layer/package-used-p 'pretty-fonts)
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix " ")))

;;;; Spaceline-all-the-icons

(defun display/post-init-spaceline-all-the-icons ()
  (spaceline-all-the-icons-theme)

  (setq spaceline-highlight-face-func 'spaceline-highlight-face-default)

  (setq spaceline-all-the-icons-icon-set-modified         'chain)
  (setq spaceline-all-the-icons-icon-set-window-numbering 'square)
  (setq spaceline-all-the-icons-separator-type            'none)
  (setq spaceline-all-the-icons-primary-separator         "·")

  ;; !!!!!!!!!!!!!!!!
  ;; !! https://github.com/domtronn/spaceline-all-the-icons.el/issues/55
  ;; !! If you remove this - expect EXTREMELY degraded performance
  ;; !! on files of more-or-less any size and of any type
  ;; !!!!!!!!!!!!!!!!
  (spaceline-toggle-projectile-root-off)
  (spaceline-toggle-all-the-icons-projectile-off)
  (spaceline-toggle-all-the-icons-buffer-id-off)


  ;; Mode Segments
  (spaceline-toggle-all-the-icons-minor-modes-off)

  ;; Buffer Segments
  (spaceline-toggle-all-the-icons-buffer-size-off)
  (spaceline-toggle-all-the-icons-buffer-position-on)
  (spaceline-toggle-all-the-icons-buffer-id-on)

  ;; Git Segments
  (spaceline-toggle-all-the-icons-git-status-on)
  (spaceline-toggle-all-the-icons-vc-icon-off)
  (spaceline-toggle-all-the-icons-vc-status-on)

  ;; Misc Segments
  (spaceline-toggle-all-the-icons-eyebrowse-workspace-off)
  (spaceline-toggle-all-the-icons-flycheck-status-off)
  (spaceline-toggle-all-the-icons-time-on))

;;; Pretty Packages

;;;; Pretty-code

(defun display/init-pretty-code ()
  (use-package pretty-code
    :defer t
    :config
    (progn
      (pre)
      (pretty-code-add-hook 'emacs-lisp-mode-hook '((:def "defun")))
      (pretty-code-add-hook 'python-mode-hook     '((:def "def")
                                                    (:lambda "lambda"))))))

;;;; Pretty-eshell

(defun display/init-pretty-eshell ()
  (use-package pretty-eshell
    :defer t
    :init
    (progn
      ;; Change default banner message
      (setq eshell-banner-message (s-concat (s-repeat 20 "---") "\n\n"))

      ;; More prompt styling
      (setq pretty-eshell-header "\n︳")
      (setq pretty-eshell-prompt-string " "))

    :config
    (progn
      ;; Directory
      (pretty-eshell-section
       esh-dir
       "\xf07c"  ; 
       (abbreviate-file-name (eshell/pwd))
       '(:foreground "#268bd2" :weight bold :underline t))

      ;; Git Branch
      (pretty-eshell-section
       esh-git
       "\xe907"  ; 
       (magit-get-current-branch)
       '(:foreground "#8D6B94"))

      ;; Python Virtual Environment
      (pretty-eshell-section
       esh-python
       "\xe928"  ; 
       pyvenv-virtual-env-name)

      ;; Time
      (pretty-eshell-section
       esh-clock
       "\xf017"  ; 
       (format-time-string "%H:%M" (current-time))
       '(:foreground "forest green"))

      ;; Prompt Number
      (pretty-eshell-section
       esh-num
       "\xf0c9"  ; 
       (number-to-string pretty-eshell-prompt-num)
       '(:foreground "brown"))

      (setq pretty-eshell-funcs
            (list esh-dir esh-git esh-python esh-clock esh-num)))))

;;;; Pretty-fonts

(defun display/init-pretty-fonts ()
  (use-package pretty-fonts
    :config
    ;; !! This is required to avoid segfault when using emacs as daemon !!
    (spacemacs|do-after-display-system-init
     (pretty-fonts-add-hook 'prog-mode-hook pretty-fonts-fira-code-alist)
     (pretty-fonts-add-hook 'org-mode-hook  pretty-fonts-fira-code-alist)

     (pretty-fonts-set-fontsets-for-fira-code)
     (pretty-fonts-set-fontsets
      '(;; All-the-icons fontsets
        ("fontawesome"
         ;;                         
         #xf07c #xf0c9 #xf0c4 #xf0cb #xf017 #xf101)

        ("all-the-icons"
         ;;    
         #xe907 #xe928)

        ("github-octicons"
         ;;                               
         #xf091 #xf059 #xf076 #xf075 #xe192  #xf016 #xf071)

        ("material icons"
         ;;              
         #xe871 #xe918 #xe3e7  #xe5da
         ;;              
         #xe3d0 #xe3d1 #xe3d2 #xe3d4))))))

;;;; Pretty-magit

(defun display/init-pretty-magit ()
  (use-package pretty-magit
    :config
    (progn
      (pretty-magit-add-leaders
       '(("Feature" ? (:foreground "slate gray" :height 1.2))
         ("Add"     ? (:foreground "#375E97" :height 1.2))
         ("Fix"     ? (:foreground "#FB6542" :height 1.2))
         ("Clean"   ? (:foreground "#FFBB00" :height 1.2))
         ("Docs"    ? (:foreground "#3F681C" :height 1.2))))

      (pretty-magit-setup))))

;;;; Pretty-outlines

(defun display/init-pretty-outlines ()
  (use-package pretty-outlines
    :defer t
    :hook ((outline-mode       . pretty-outlines-set-display-table)
           (outline-minor-mode . pretty-outlines-set-display-table)
           (elixir-mode        . pretty-outlines-add-bullets)
           (emacs-lisp-mode    . pretty-outlines-add-bullets)
           (hy-mode            . pretty-outlines-add-bullets)
           (python-mode        . pretty-outlines-add-bullets))))

#+end_src
***** Org-super-agenda

Pretty super agenda!

#+begin_src emacs-lisp :tangle layers/display/packages.el
(defun display/init-org-super-agenda ()
  (use-package org-super-agenda
    :defer t
    :ensure t
    :commands (org-super-agenda-mode)
    :hook (org-agenda-mode . org-super-agenda-mode)
    :init
    (setq org-agenda-block-separator 9472      ;; Use a straight line as separator between agenda agenda blocks
          org-agenda-compact-blocks t
          org-agenda-include-deadlines t       ;; Include deadlines in the agenda
          org-agenda-skip-deadline-if-done t   ;; Don't include deadlines in the agenda if they're in the `DONE' state
          org-agenda-skip-scheduled-if-done t  ;; Don't include items in the agenda if they're in the `DONE' state
          org-super-agenda-header-map nil      ;; Fixes issues with evil-mode
          )
    (setq org-agenda-custom-commands
          '(("o" "Overview"
             ((agenda "" ((org-agenda-span 'day)
                          (org-super-agenda-groups
                           '((:name "Today"
                                    :time-grid t
                                    :date today
                                    :todo "TODAY"
                                    :scheduled today
                                    :order 1)))))
              (alltodo "" ((org-agenda-overriding-header "")
                           (org-super-agenda-groups
                            '((:name "Next to do"
                                     :todo "NEXT"
                                     :order 1)
                              (:name "Important"
                                     :tag "Important"
                                     :priority "A"
                                     :order 6)
                              (:name "Due Today"
                                     :deadline today
                                     :order 2)
                              (:name "Due Soon"
                                     :deadline future
                                     :order 8)
                              (:name "Overdue"
                                     :deadline past
                                     :face error
                                     :order 7)
                              (:name "Work"
                                     :tag "Work"
                                     :order 10)
                              (:name "Personal"
                                     :tag "Personal"
                                     :order 11)
                              (:name "Issues"
                                     :tag "Issue"
                                     :order 12)
                              (:name "Projects"
                                     :tag "Project"
                                     :order 14)
                              (:name "Emacs"
                                     :tag "Emacs"
                                     :order 13)
                              (:name "Research"
                                     :tag "Research"
                                     :order 15)
                              (:name "To read"
                                     :tag "Read"
                                     :order 30)
                              (:name "Waiting"
                                     :todo "WAITING"
                                     :priority "C"
                                     :order 20)
                              (:name "Trivial"
                                     :priority<= "C"
                                     :tag ("Trivial" "Unimportant")
                                     :todo ("SOMEDAY" )
                                     :order 90)
                              (:discard (:tag ("Chore" "Routine" "Daily")))))))))))))
#+end_src
***** Org-superstar

This package makes the Org headline bullet points look pretty.

#+begin_src emacs-lisp :tangle layers/display/packages.el
(defun display/pre-init-org-superstar ()
  (use-package org-superstar
    :defer t
    :ensure t
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-prettify-item-bullets t
          org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶"))))
#+end_src
***** Org-fancy-priorities

Nice priorities for Org agenda

#+begin_src emacs-lisp :tangle layers/display/packages.el
(defun display/init-org-fancy-priorities ()
  (use-package org-fancy-priorities
    :defer t
    :ensure t
    :diminish
    :defines org-fancy-priorities-list
    :hook (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-priority-faces '((?A . all-the-icons-red)
                               (?B . all-the-icons-yellow)
                               (?C . all-the-icons-blue))
          org-fancy-priorities-list '(
                                      (?A . "⬆")   ;; High
                                      (?B . "■")   ;; Medium
                                      (?C . "⬇"))) ;; Low
    ))
#+end_src
***** All-the-icons

All-The-Icons is a utility package that contains lots of pretty icons for all
sorts of things. Make sure to run ~M-x all-the-icons-install-fonts~ to install the
resource fonts included in the package.

#+begin_src emacs-lisp :tangle layers/display/packages.el
(defun display/post-init-all-the-icons ()
  (use-package all-the-icons
    :defer t
    :config
    (let ((hy-icon '(all-the-icons-fileicon "hy" :face all-the-icons-orange))
          (dt-icon '(all-the-icons-fileicon "graphviz" :face all-the-icons-pink)))
      (add-to-list 'all-the-icons-icon-alist      `("\\.hy$"          ,@hy-icon))
      (add-to-list 'all-the-icons-icon-alist      `("\\.dot$"         ,@dt-icon))
      (add-to-list 'all-the-icons-mode-icon-alist `(hy-mode           ,@hy-icon))
      (add-to-list 'all-the-icons-mode-icon-alist `(graphviz-dot-mode ,@dt-icon)))))
#+end_src

***** All-the-icons-ivy

Ivy/Counsel integration for all-the-icons.

#+begin_src emacs-lisp :tangle layers/display/packages.el
(defun display/init-all-the-icons-ivy ()
  (use-package all-the-icons-ivy
    :config
    (progn
      ;; Fix icon prompt alignment in ivy prompts
      (advice-add 'all-the-icons-ivy-file-transformer :override
                  'all-the-icons-ivy-file-transformer-stdized)

      ;; Add behavior to counsel projectile funcs too
      (advice-add 'counsel-projectile-find-file-transformer :filter-return
                  'all-the-icons-ivy-file-transformer-stdized)
      (advice-add 'counsel-projectile-transformer :filter-return
                  'all-the-icons-ivy-file-transformer-stdized)

      (all-the-icons-ivy-setup))))
#+end_src

***** Git-gutter

Optimally, Emacs could detect if the current buffer is version controlled, but I
don't know if that's possible. For now, we just enable the Git gutter for ~prog-mode~.

#+begin_src emacs-lisp :tangle layers/display/packages.el
(defun display/post-init-git-gutter ()
  (use-package git-gutter
    :defer t
    :hook (prog-mode . git-gutter-mode)
    :config (setq git-gutter:update-interval 0.02)))
#+end_src

***** Git-gutter-fringe

Doom Emacs has some nice bitmap values for the Git gutter fringe to make the
gutter symbols resemble VSCode (looks pretty good).

#+begin_src emacs-lisp :tangle layers/display/packages.el
(defun  display/post-init-git-gutter-fringe ()
  (use-package git-gutter-fringe
    :defer t
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom)))
#+end_src

** User Init

For any functionality that should be loaded before layers are initialized, use
~:tangle user-init.el~. It will then be written to ~user-init.el~ and loaded by
this function.

#+begin_src emacs-lisp
(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  ;; tangle without actually loading org
  (let ((src (concat dotspacemacs-directory "spacemacs.org"))
        (ui (concat dotspacemacs-directory "user-init.el"))
        (uc (concat dotspacemacs-directory "user-config.el")))
    (when (or (file-newer-than-file-p src ui)
              (file-newer-than-file-p src uc))
      (call-process
       (concat invocation-directory invocation-name)
       nil nil t
       "-q" "--batch" "--eval" "(require 'ob-tangle)"
       "--eval" (format "(org-babel-tangle-file \"%s\")" src)))
    (if (file-exists-p ui) (load-file ui))))
#+end_src

** User Config

For any functionality that should be loaded after layers are initialized, use
~:tangle user-config.el~. It will then be written to ~user-config.el~ and loaded by
this function.

#+begin_src emacs-lisp
(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."
  (let ((uc (concat dotspacemacs-directory "user-config.el")))
    (if (file-exists-p uc) (load-file uc))))
#+end_src

* Personal Preferences - The random config dumping ground

Me

#+begin_src emacs-lisp
(setq user-full-name "Rolf Håvard Blindheim"
      user-email-address "rhblind@gmail.com")
#+end_src

Random stuff that doesn't fit into any particular category

#+begin_src emacs-lisp
(setq display-time-24hr-format t                     ;; I don't know the difference between AM and PM
      layouts-enable-autosave t                      ;; Automatically save layouts
      layouts-autosave-delay 1800                    ;; Save layouts every 30 minutes
      x-mouse-click-focus-ignore-position t          ;; Makes switching windows with mouse work on X-Window system
      vc-follow-symlinks nil                         ;; Don't follow symlinks, edit them directly
      newsticker-dir "~/.emacs.d/.cache/newsticker"  ;; I once had ambitions to read stuff...
      )
#+end_src

** Scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-follow-mouse t                          ;; Scroll window under mouse
      pixel-scroll-mode nil                               ;; Disable pixel scrolling - veeeeeeery slow
      mac-mouse-wheel-smooth-scroll nil                   ;; Probably too many pixels ;)
      mouse-wheel-progressive-speed nil                   ;; Don't accelerate scrolling
      mouse-wheel-scroll-amount '(1 ((shift) . 1)         ;; Mouse scroll 1 line at a time
                                    ((control) . nil))    ;; Hold ctrl to scroll to top/end of buffer
      scroll-step 1                                       ;; Keyboard scroll 1 line at the time
      scroll-preserve-screen-position t
      scroll-conservatively 100)
#+end_src

** Globals

Random stuff I want enabled no matter what!

#+begin_src emacs-lisp :tangle user-config.el
(global-company-mode)                                     ;; Enable company-mode(autocomplete) globally
(global-unset-key [down-mouse-1])                         ;; No dragging nonsense
(global-set-key [down-mouse-1] 'mouse-select-window)      ;; Select window with mouse click
(treemacs-resize-icons 14)                                ;; Slightly bigger Treemacs icons
(ws-butler-global-mode)                                   ;; Unobtrusive way to trim spaces on end of lines
#+end_src

Please don't quit Emacs every time I accidentally type ~:q~

#+begin_src emacs-lisp :tangle user-config.el
(evil-ex-define-cmd "q[uit]" 'evil-delete-buffer)         ;; Redefine :q to delete buffer instead of exiting emacs
#+end_src

*** Shell, GPG, SSH and Encryption

#+begin_src emacs-lisp :tangle user-init.el
(require 'epa-file)    ;; Load library for decrypting the `secrets.el.gpg' file
;; (setq epa-pinentry-mode 'loopback)  ;; Allows unlocking gpg keys using the Emacs minibuffer (gpg --> gpg-agent --> pinentry --> Emacs)
#+end_src

I'm usually on MacOS

#+begin_src emacs-lisp :tangle user-init.el
(when (eq system-type 'darwin)
  (setq shell-file-name "/bin/bash")
  (setq dired-listing-switches "-aBhl --group-directories-first"
        helm-locate-command "glocate %s -e -A --regex %s"
        helm-locate-recursive-dirs-command "glocate -i -e -A --regex '^%s' '%s.*$'"
        insert-directory-program "/usr/local/bin/gls")

  (custom-set-variables '(epg-gpg-program "/usr/local/bin/gpg")))
#+end_src

#+begin_src emacs-lisp :tangle user-config.el
(when (eq system-type 'darwin)
  (require 'exec-path-from-shell)
  (setq exec-path-from-shell-check-startup-files nil)  ;; Don't complain about putting thing in the wrong files
  (dolist (var '("LANG" "LC_TYPE" "GPG_AGENT_INFO" "SSH_AUTH_SOCK"))
    (add-to-list 'exec-path-from-shell-variables var))
  (exec-path-from-shell-initialize)
  (shell-command "gpg-connect-agent updatestartuptty /bye >/dev/null"))
#+end_src


But I used to be on Linux

#+begin_src emacs-lisp :tangle user-init.el
(when (eq system-type 'gnu/linux)
  (setq shell-file-name "/bin/bash"))
#+end_src

Either way, there's some things that always has to be done

#+begin_src emacs-lisp :tangle user-init.el
(epa-file-enable)
(setq auto-resume-layers t
      auth-source-debug  nil  ;; Enable logging of authentication related stuff to the `*Messages' buffer. Disable when not needed!
      custom-file        "~/.spacemacs.d/.custom-settings.el"
      secrets-file       "~/.spacemacs.d/secrets.el.gpg")

;; This file keeps secrets for emacs configurations
(load-file secrets-file)
#+end_src

** Keyboard and bindings

I need weird characters

#+begin_src emacs-lisp :tangle user-init.el
(require 'iso-transl)  ;; Enables "dead keys" for non-english keyboards
#+end_src

I don't really use this, but I'll just keep around for "later inspection"

#+begin_src emacs-lisp :tangle user-config.el
(when (and (boundp 'redo-bindings?) redo-bindings?
          (configuration-layer/package-used-p 'redo-spacemacs))
  (redo-spacemacs-bindings))
#+end_src

Some old habits are hard to unlearn. Got some keybindings that are too
hard-wired in my brains to even bother to change.

#+begin_src emacs-lisp
(global-set-key (kbd "<C-return>") 'newline-below)          ;; Ctrl-Enter inserts a new line below
(global-set-key (kbd "<S-return>") 'newline-above)          ;; Shift-Enter inserts a new line above
(global-set-key (kbd "<C-backspace>") 'backward-kill-word)  ;; Ctrl-Backspace deletes previous word
#+end_src

* Packages
** Org Mode

I keep all my Org mode files in a Dropbox directory for easy sync and backup.

#+begin_src emacs-lisp
(setq org-directory          "~/Dropbox/org")
(setq org-roam-directory     (concat (file-name-as-directory org-directory) "roam")
      org-download-image-dir (concat (file-name-as-directory org-directory) "images")
      org-roam-v2-ack        t)
#+end_src

Should probably clean up this a bit - do I really need all these different
files?

#+begin_src emacs-lisp
(setq org-default-notes-file        (concat (file-name-as-directory org-directory) "misc.org")
      org-work-notes-file           (concat (file-name-as-directory org-directory) "work.org")
      org-projects-file             (concat (file-name-as-directory org-directory) "projects.org")
      org-roam-index-file           (concat (file-name-as-directory org-roam-directory) "index.org")
      org-agenda-files              (file-expand-wildcards (concat (file-name-as-directory org-directory) "*.org")))
#+end_src

Finally some other tweaks

#+begin_src emacs-lisp
(setq-default org-display-custom-times t)
(setq org-todo-keywords                  '((sequence "TODO" "IN PROGRESS"
                                                     "|"
                                                     "DONE" "NEVERMIND"))
      org-use-property-inheritance       t
      org-log-done-with-time             t
      org-catch-invisible-edits          'smart
      org-agenda-skip-unavailable-files  t
      org-ellipsis                       ""
      org-export-in-background           nil ;; Async export not working when ox is bytecompiled?
      org-fontify-whole-heading-line     t
      org-fontify-done-headline          nil
      org-fontify-quote-and-verse-blocks t
      org-hide-emphasis-markers          t
      org-hide-leading-stars             t
      org-indent-indentation-per-level   1
      org-log-state-notes-into-drawer    t
      org-log-done-with-time             t
      org-startup-indented               t
      org-pretty-entities                t
      org-priority-faces                 '((65 :inherit org-priority :foreground "red")
                                           (66 :inherit org-priority :foreground "brown")
                                           (67 :inherit org-priority :foreground "blue"))
      org-time-stamp-custom-formats      '("<%a %d.%m.%Y>" . "<%a %d.%m.%Y %H:%M>"))
#+end_src

*Mode Hooks*

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-flyspell)
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'variable-pitch-mode)
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook (lambda () (progn
                                      (require 'org-tempo)  ;; Required for new org templating system to work
                                      (setq line-spacing 0.2
                                            header-line-format " "
                                            left-margin-width 2
                                            right-margin-width 2))))
#+end_src

*Some custom keybindings*

#+begin_src emacs-lisp :tangle user-config.el
(spacemacs|use-package-add-hook org
  :post-init (evil-define-key '(normal visual motion) org-mode-map
               "gh" 'outline-up-heading
               "gj" 'outline-forward-same-level
               "gk" 'outline-backward-same-level
               "gl" 'outline-next-visible-heading
               "gu" 'outline-previous-visible-heading))

(spacemacs/set-leader-keys-for-major-mode 'org-mode
  "o"   'counsel-outline
  "r"   'org-refile
  "g"   'org-mark-ring-goto
  "h"   'org-metaleft                    ;; Because of MacOS's damned, indestructable M-h binding...
  "d o" 'org-toggle-time-stamp-overlays  ;; Required to toggle off before changing time when using custom formats
  "s p" 'org-sort-entries-priorities)
#+end_src

Make sure org-roam is available on startup

#+begin_src emacs-lisp :tangle user-config.el
(org-roam-db-autosync-mode)
#+end_src

*** Exporting

I'm not really exporting too many org files, but occasionally I like to make
presentations using ~org-re-reveal~.

#+begin_src emacs-lisp
(setq org-re-reveal-root                 "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.9.2"
      org-re-reveal-revealjs-version     "3.8"
      org-re-reveal-title-slide          "<h1>%t</h1><h2>%s</h2><h4>%e</h4>")
#+end_src

This is mostly an experiment, but apparently you can get some nice LaTex exports
using a good template. This is not a good template :)

#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
    (setq org-latex-listings 'minted
          org-latex-packages-alist '(("" "minted"))
          org-latex-minted-options '(("breaklines" "true")
                                     ("breakanywhere" "true")))
    (setq org-latex-pdf-process
          (list (concat "latexmk "
                        "-xelatex "
                        "-recorder -synctex=1 -bibtex-cond %b")))
    (setq org-latex-classes
          '(("article"
             "\\RequirePackage{fix-cm}
\\PassOptionsToPackage{svgnames}{xcolor}
\\documentclass[11pt]{article}
\\usepackage{fontspec}
\\setmainfont{ETBembo RomanOSF}
\\setsansfont[Scale=MatchLowercase]{Raleway}
\\setmonofont[Scale=MatchLowercase]{ETBembo}
\\usepackage{sectsty}
\\allsectionsfont{\\sffamily}
\\usepackage{enumitem}
\\setlist[description]{style=unboxed,font=\\sffamily\\bfseries}
\\usepackage{listings}
\\lstset{frame=single,aboveskip=1em,
	framesep=.5em,backgroundcolor=\\color{AliceBlue},
	rulecolor=\\color{LightSteelBlue},framerule=1pt}
\\usepackage{xcolor}
\\newcommand\\basicdefault[1]{\\scriptsize\\color{Black}\\ttfamily#1}
\\lstset{basicstyle=\\basicdefault{\\spaceskip1em}}
\\lstset{literate=
	    {§}{{\\S}}1
	    {©}{{\\raisebox{.125ex}{\\copyright}\\enspace}}1
	    {«}{{\\guillemotleft}}1
	    {»}{{\\guillemotright}}1
	    {Á}{{\\'A}}1
	    {Ä}{{\\\"A}}1
	    {É}{{\\'E}}1
	    {Í}{{\\'I}}1
	    {Ó}{{\\'O}}1
	    {Ö}{{\\\"O}}1
	    {Ú}{{\\'U}}1
	    {Ü}{{\\\"U}}1
	    {ß}{{\\ss}}2
	    {à}{{\\`a}}1
	    {á}{{\\'a}}1
	    {ä}{{\\\"a}}1
	    {é}{{\\'e}}1
	    {í}{{\\'i}}1
	    {ó}{{\\'o}}1
	    {ö}{{\\\"o}}1
	    {ú}{{\\'u}}1
	    {ü}{{\\\"u}}1
	    {¹}{{\\textsuperscript1}}1
            {²}{{\\textsuperscript2}}1
            {³}{{\\textsuperscript3}}1
	    {ı}{{\\i}}1
	    {—}{{---}}1
	    {’}{{'}}1
	    {…}{{\\dots}}1
            {⮠}{{$\\hookleftarrow$}}1
	    {␣}{{\\textvisiblespace}}1,
	    keywordstyle=\\color{DarkGreen}\\bfseries,
	    identifierstyle=\\color{DarkRed},
	    commentstyle=\\color{Gray}\\upshape,
	    stringstyle=\\color{DarkBlue}\\upshape,
	    emphstyle=\\color{Chocolate}\\upshape,
	    showstringspaces=false,
	    columns=fullflexible,
	    keepspaces=true}
\\usepackage[a4paper,margin=1in,left=1.5in]{geometry}
\\usepackage{parskip}
\\makeatletter
\\renewcommand{\\maketitle}{%
  \\begingroup\\parindent0pt
  \\sffamily
  \\Huge{\\bfseries\\@title}\\par\\bigskip
  \\LARGE{\\bfseries\\@author}\\par\\medskip
  \\normalsize\\@date\\par\\bigskip
  \\endgroup\\@afterindentfalse\\@afterheading}
\\makeatother
[DEFAULT-PACKAGES]
\\hypersetup{linkcolor=Blue,urlcolor=DarkBlue,
  citecolor=DarkRed,colorlinks=true}
\\AtBeginDocument{\\renewcommand{\\UrlFont}{\\ttfamily}}
[PACKAGES]
[EXTRA]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

            ("report" "\\documentclass[11pt]{report}"
             ("\\part{%s}" . "\\part*{%s}")
             ("\\chapter{%s}" . "\\chapter*{%s}")
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))

            ("book" "\\documentclass[11pt]{book}"
             ("\\part{%s}" . "\\part*{%s}")
             ("\\chapter{%s}" . "\\chapter*{%s}")
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
    )
#+end_src

*** Org Babel

Org babel is used to evaluate code blocks in org files.

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate   nil)
(setq org-src-fontify-natively     t)
(setq org-src-tab-acts-natively    t)
(setq org-src-preserve-indentation t)
(setq org-src-window-setup         'current-window)
(setq org-babel-default-header-args '((:session . "none")
                                      (:results . "replace")
                                      (:exports . "code")
                                      (:cache   . "no")
                                      (:noweb   . "no")
                                      (:hlines  . "no")
                                      (:tangle  . "no")
                                      (:comment . "link")))
(spacemacs|use-package-add-hook org
  :post-config (add-to-list 'org-babel-load-languages '(dot . t)))
#+end_src

*** Org Projectile

#+begin_src emacs-lisp :tangle user-config.el
(use-package org-projectile
  :defer t
  :after org
  :config
  (progn (setq org-projectile-per-project-filepath "TODO.org"
               org-projectile-capture-template "* TODO %? %^G\n%i\n%a"
               org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
         (org-projectile-per-project)))
#+end_src

*** Org Roam

Pretty graphs and lots of fun!

#+begin_src emacs-lisp :tangle user-config.el
(use-package org-roam-ui
  :defer t
  :after org-roam
  :config (setq org-roam-ui-sync-theme t
                  org-roam-ui-follow t
                  org-roam-ui-update-on-save t
                  org-roam-ui-open-on-start t))
#+end_src

A little hack I found somewhere to better display node hierarchy when searching
for nodes using ~org-roam-node-find()~.

#+begin_src emacs-lisp
(with-eval-after-load 'org-roam
  (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
    "Return the file TITLE for the node."
    (org-roam-get-keyword "TITLE" (org-roam-node-file node)))

  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    "Return the hierarchy for the node."
    (let ((title (org-roam-node-title node))
          (olp (org-roam-node-olp node))
          (level (org-roam-node-level node))
          (filetitle (org-roam-node-filetitle node)))
      (concat
       (if (> level 0) (concat filetitle " -> "))
       (if (> level 1) (concat (string-join olp " -> ") " -> "))
       title))
    )

  ;; Display node hierarchy in the org-roam-node-find list
  (setq org-roam-node-display-template "${hierarchy:*} ${tags:20}")


  ;; Allow mouse navigation in backlink buffer
  (define-key org-roam-mode-map [mouse-1] #'org-roam-visit-thing))
#+end_src

Also, use a side window for back-link buffer

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-side-window)
               (side . right)
               (slot . 0)
               (window-width . 0.25)
               (preserve-size . (t nil))
               (window-parameters . ((no-other-window . t)
                                     (no-delete-other-windows . t)))))
#+end_src

*** Declarative Org Capture Templates

#+begin_src emacs-lisp :tangle user-config.el
(use-package doct
    :defer t
    :ensure t
    :commands (doct)
    :after (org-capture)
    :init
    (setq org-capture-templates
          ;; https://github.com/progfolio/doct#manual
          ;; https://orgmode.org/manual/Template-expansion.html#Template-expansion
          (doct `(
                  (,(format "%s\tTasks" (all-the-icons-octicon "inbox" :face 'all-the-icons-yellow :v-adjust 0.01))
                   :keys "k"
                   :headline "Tasks"
                   :prepend t
                   :type entry
                   :file org-default-notes-file
                   :children ((,(format "%s\tGeneral task" (all-the-icons-octicon "checklist" :face 'all-the-icons-yellow :v-adjust 0.01))
                               :keys "k"
                               :template ("* TODO %? %^G"
                                          "%i"))
                              (,(format "%s\tCapture point task" (all-the-icons-octicon "checklist" :face 'all-the-icons-green :v-adjust 0.01))
                               :keys "c"
                               :template ("* TODO %? %^G"
                                          "%i %a"))
                              (,(format "%s\tTask with deadline" (all-the-icons-material "timer" :face 'all-the-icons-red :v-adjust -0.1))
                               :keys "d"
                               :template ("* TODO %? %^G%{extra}"
                                          "%i")
                               :extra "\nDEADLINE: %^{Due date:}T")
                              (,(format "%s\tScheduled task" (all-the-icons-octicon "calendar" :face 'all-the-icons-red :v-adjust 0.01))
                               :keys "s"
                               :template ("* TODO %? %^G%{extra}"
                                          "%i")
                               :extra "\nSCHEDULED: %^{Task date}t")
                              ))
                  (,(format "%s\tWork" (all-the-icons-faicon "building" :face 'all-the-icons-purple :v-adjust 0.01))
                   :keys "w"
                   :headline "Work"
                   :prepend t
                   :type entry
                   :file org-work-notes-file
                   :children ((,(format "%s\tMiscellaneous task" (all-the-icons-octicon "checklist" :face 'all-the-icons-yellow :v-adjust 0.01))
                               :keys "k"
                               :headline "Tasks"
                               :template ("* TODO [#C] %? %^G:work:"
                                          "%i"))
                              (,(format "%s\tTask with deadline" (all-the-icons-material "timer" :face 'all-the-icons-red :v-adjust -0.1))
                               :keys "d"
                               :headline "Tasks"
                               :template ("* TODO [#B] %? %^G:work:%{extra}"
                                          "%i")
                               :extra "\nDEADLINE: %^{Due date:}T")
                              (,(format "%s\tScheduled task" (all-the-icons-octicon "calendar" :face 'all-the-icons-red :v-adjust 0.01))
                               :keys "s"
                               :headline "Tasks"
                               :template ("* TODO [#C] %? %^G:work:%{extra}"
                                          "%i")
                               :extra "\nSCHEDULED: %^{Task date}t")
                              (,(format "%s\tWork note" (all-the-icons-faicon "sticky-note-o" :face 'all-the-icons-green :v-adjust 0.01))
                               :keys "n"
                               :headline "Notes"
                               :template ("* %? :work:"
                                          "%i"))))
                  (,(format "%s\tInteresting" (all-the-icons-faicon "eye" :face 'all-the-icons-lcyan :v-adjust 0.01))
                   :keys "i"
                   :headline "Interesting"
                   :prepend t
                   :type entry
                   :file org-default-notes-file
                   :template ("* %{desc}%? :%{i-type}:%^G"
                              "%i")
                   :children ((,(format "%s\tWebpage" (all-the-icons-faicon "globe" :face 'all-the-icons-green :v-adjust 0.01))
                               :keys "w"
                               :desc "%(org-cliplink-capture) "
                               :i-type "read:web"
                               )
                              (,(format "%s\tArticle" (all-the-icons-octicon "file-text" :face 'all-the-icons-yellow :v-adjust 0.01))
                               :keys "a"
                               :desc ""
                               :i-type "read:research"
                               )
                              (,(format "%s\tInformation" (all-the-icons-faicon "info-circle" :face 'all-the-icons-blue :v-adjust 0.01))
                               :keys "i"
                               :desc ""
                               :i-type "read:info"
                               )
                              (,(format "%s\tIdea" (all-the-icons-material "bubble_chart" :face 'all-the-icons-silver :v-adjust 0.01))
                               :keys "I"
                               :desc ""
                               :i-type "idea"
                               )))
                  )
                ))
    :config
    (progn
      (advice-add 'org-capture-select-template :override #'org-capture-select-template-prettier)
      ;; (advice-add 'org-mks :override #'org-mks-pretty) ;; FIXME Gives wrong number of arguments
      ))
#+end_src

** Projectile

#+begin_src emacs-lisp
(setq projectile-enable-caching               t
      projectile-project-search-path          '("~/workspace")  ;; A relic directory from when I used Eclipse back in the days
      projectile-globally-ignored-files       '(".DS_Store")    ;; Super annoying files
      projectile-globally-ignored-directories '(".git"
                                                ".idea"
                                                ".import"
                                                ".elixir_ls"
                                                ".htmlcov"
                                                ".pytest_cache"
                                                "_build"
                                                "__pycache__"
                                                "deps"
                                                "node_modules"))
#+end_src

* Theming

I usually like the Solarized light theme.

#+begin_src emacs-lisp :tangle user-config.el
(use-package solarized-theme)
#+end_src

And of course we want them funny emojis 🥴

#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (set-fontset-font t 'symbol (font-spec :family "Apple Symbols") nil 'prepend)
  (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji")))
#+end_src

** Fonts

Set up some variable pitch font properties. Some of these fonts needs to be
installed, but it will pick the first available font in the list.

#+begin_src emacs-lisp
(let* ((variable-tuple
        (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
              ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
              ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
              ((x-list-fonts "Verdana")         '(:font "Verdana"))
              ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
              (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color))
       (fixed-pitch        `(:family "Fira Code Retina" :height 160)))

  (setq-local variable-tuple variable-tuple
              fixed-pitch    fixed-pitch
              headline       headline))
#+end_src

Remap some faces so we can style similar stuff

#+begin_src emacs-lisp
(setq face-remapping-alist '(;; Headers - outlines match org
                             (outline-1 org-level-1)
                             (outline-2 org-level-2)
                             (outline-3 org-level-3)

                             ;; Modeline - invis. active, monochrome inactive
                             (powerline-active1        mode-line)
                             (powerline-active2        mode-line)
                             (spaceline-highlight-face mode-line)

                             (powerline-active0        mode-line)
                             (mode-line-active         mode-line)
                             (mode-line-inactive       mode-line)
                             (powerline-inactive0      mode-line)
                             (powerline-inactive1      mode-line)
                             (powerline-inactive2      mode-line)
                             ))
#+end_src

** Styling

In this section we customize various headers per theme. First specify a common
header, which other can inherit and modify.

#+begin_src emacs-lisp
(setq display/headers/common `(,@headline ,@variable-tuple :underline nil :inherit nil))
#+end_src

*** Org

#+begin_src emacs-lisp
(setq display/org-code/common                  '(:inherit (shadow fixed-pitch :weight normal)))
(setq display/org-code                         `((org-code ,@display/org-code/common)))
(setq display/org-blocks/common                '(:inherit fixed-pitch :italic nil :underline nil :overline nil :box nil))
(setq display/org-blocks                       `((org-block            ,@display/org-code/common)
                                                 (org-block-begin-line ,@display/org-blocks/common)
                                                 (org-block-end-line   ,@display/org-blocks/common)))
(setq display/org-document-info/common         '(:foreground "#cb4b16"))
(setq display/org-document-info                `((org-document-info ,@display/org-document-info/common)))
(setq display/org-document-info-keyword/common '(:inherit (shadow fixed-pitch)))
(setq display/org-document-info-keyword        `((org-document-info-keyword ,@display/org-document-info-keyword/common)))
(setq display/org-indent/common                '(:inherit (org-hide fixed-pitch)))
(setq display/org-indent                       `((org-indent ,@display/org-indent/common)))
(setq display/org-link/common                  '(:foreground "#0087ff" :underline t))
(setq display/org-link                         `((org-link ,@display/org-link/common)))
(setq display/org-meta-line/common             '(:inherit (font-lock-comment-face fixed-pitch)))
(setq display/org-meta-line                    `((org-meta-line ,@display/org-meta-line/common)))
(setq display/org-property-value/common        '(:inherit fixed-pitch))
(setq display/org-property-value               `((org-property-value ,@display/org-property-value/common)))
(setq display/org-special-keyword/common       '(:inherit (font-lock-comment-face fixed-pitch)))
(setq display/org-special-keyword              `((org-special-keyword ,@display/org-special-keyword/common)))
(setq display/org-table/common                 '(:inherit fixed-pitch :foreground "#83a598"))
(setq display/org-table                        `((org-table ,@display/org-table/common)))
(setq display/org-tag/common                   '(:inherit (shadow fixed-pitch) :weight bold :height 0.8))
(setq display/org-tag                          `((org-tag ,@display/org-tag/common)))
(setq display/org-verbatim/common              '(:inherit (shadow fixed-pitch)))
(setq display/org-verbatim                     `((org-verbatim ,@display/org-verbatim/common)))
#+end_src

*** Company

#+begin_src emacs-lisp
(setq display/company/common '(:weight bold :underline nil))
(setq display/company
      `((company-tooltip-common
         ,@display/company/common
         :inherit company-tooltip)
        (company-tooltip-common-selection
         ,@display/company/common
         :inherit company-tooltip-selection))
      )
#+end_src

*** Mode-Line

#+begin_src emacs-lisp
(setq display/mode-line/common '(:box nil :underline nil))
(setq display/mode-line
      `((mode-line
         ,@display/mode-line/common
         :background nil)
        (mode-line-inactive
         ,@display/mode-line/common)))
#+end_src

*** Font-Locks

#+begin_src emacs-lisp
(setq display/font-locks
      `((font-lock-comment-face
         :italic t
         :weight normal)
        (font-lock-doc-face
         :italic t
         :weight normal)))
#+end_src

** Themes

Apply custom theme faces.

#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 `(variable-pitch ((t (,@variable-tuple :height 190 :weight thin))))
 `(fixed-pitch    ((t (,@fixed-pitch)))))

(setq display/common-theming
      `(,@display/company
        ,@display/mode-line
        ,@display/org-blocks
        ,@display/org-code
        ,@display/org-document-info
        ,@display/org-document-info-keyword
        ,@display/org-indent
        ,@display/org-link
        ,@display/org-meta-line
        ,@display/org-property-value
        ,@display/org-special-keyword
        ,@display/org-table
        ,@display/org-tag
        ,@display/org-verbatim

        (avy-background-face :italic nil)
        (fringe :background nil)))
#+end_src

*** Solarized Light

My favorite light theme!

#+begin_src emacs-lisp
(setq display/headers/solarized-light
      `((org-document-title
         ,@display/headers/common
         :height 1.5
         :foreground "#d33682")
        (org-level-1
         ,@display/headers/common
         :height 1.5
         :foreground "#a71d31")
        (org-level-2
         ,@display/headers/common
         :height 1.3
         :foreground "#8D6B94")
        (org-level-3
         ,@display/headers/common
         :height 1.2
         :foreground "#657b83")
        (org-level-4
         ,@display/headers/common
         :height 1.1
         :foreground "#839496")
        (org-level-5
         ,@display/headers/common
         :foreground "#839496")
        (org-level-6
         ,@display/headers/common
         :foreground "#839496")
        (org-level-7
         ,@display/headers/common
         :foreground "#839496")
        (org-level-8
         ,@display/headers/common
         :foreground "#93a1a1")))

(setq display/solarized-light-theming
      `((mode-line-inactive :background "#eee8d5"
                            ,@(alist-get 'mode-line-inactive
                                         display/mode-line))

        (font-lock-comment-face :foreground "#586e75"
                                ,@(alist-get 'font-lock-comment-face
                                             display/font-locks))
        (font-lock-doc-face :foreground "#2aa198"
                            ,@(alist-get 'font-lock-doc-face
                                         display/font-locks))
        (ahs-plugin-default-face :foreground "#d33682"
                                 ,@(alist-get 'ahs-plugin-default-face
					                                    display/font-locks))
        (ahs-plugin-default-face-unfocused :foreground "#d33682"
                                           ,@(alist-get 'ahs-plugin-default-face-unfocused
					                                              display/font-locks))

        (org-block            :background "#faf1d9" ,@display/org-code/common)
        (org-block-begin-line :background "#f7edd0" ,@display/org-blocks/common)
        (org-block-end-line   :background "#f7edd0" ,@display/org-blocks/common)

        ;; Extra
        (sp-show-pair-match-face :background "CadetBlue3")
        (auto-dim-other-buffers-face :background "#fcf4df")

        ;; ... Experiments ...
        ))
#+end_src

*** Zenburn

I really don't use this much, but it's a nice dark theme.

#+begin_src emacs-lisp
(setq display/headers/zenburn
      `((org-document-title
         ,@display/headers/common
         :height 2.0)
        (org-level-1
         ,@display/headers/common
         :height 1.75
         :foreground "#DFAF8F")
        (org-level-2
         ,@display/headers/common
         :height 1.5
         :foreground "#BFEBBF")
        (org-level-3
         ,@display/headers/common
         :height 1.25
         :foreground "#7CB8BB")
        (org-level-4
         ,@display/headers/common
         :height 1.1)
        (org-level-5
         ,@display/headers/common)
        (org-level-6
         ,@display/headers/common)
        (org-level-7
         ,@display/headers/common)
        (org-level-8
         ,@display/headers/common)))

(setq display/zenburn-theming
      `((font-lock-comment-face :foreground "gray50"
                                ,@(alist-get 'font-lock-comment-face
                                             display/font-locks))
        (font-lock-doc-face :foreground "gray65"
                            ,@(alist-get 'font-lock-doc-face
                                         display/font-locks))

        ;; Extra
        (font-lock-comment-delimiter-face :foreground "gray35")
        (font-lock-function-name-face     :foreground "CadetBlue2")
        (font-lock-type-face              :foreground "LightCoral")
        (auto-dim-other-buffers-face      :background "gray22")

        ;; ... Experiments ...
        ))
#+end_src

*** Doom One

I don't always use the Doom One theme; but when I do, I want it to have a pink auto-highlight!

#+begin_src emacs-lisp
(setq display/doom-one-theming
      `(;; Overwrites
        (ahs-plugin-default-face :foreground "#d33682"
                                 ,@(alist-get 'ahs-plugin-default-face
					                                    display/font-locks))
        (ahs-plugin-default-face-unfocused :foreground "#d33682"
                                           ,@(alist-get 'ahs-plugin-default-face-unfocused
					                                              display/font-locks))
        (ahs-plugin-whole-buffer-face :foreground "White"
                                      :background "#d33682"
                                      ,@(alist-get 'ahs-plugin-whole-buffer-face
                                                   display/font-locks))
        ))
#+end_src

*** Set Modifications

This variable enables our modifications for the various themes customized above.

#+begin_src emacs-lisp
(setq theming-modifications
      `((solarized-light ,@display/common-theming
                         ,@display/headers/solarized-light
                         ,@display/solarized-light-theming)
        (zenburn         ,@display/common-theming
                         ,@display/headers/zenburn
                         ,@display/zenburn-theming)
        (doom-one        ,@display/doom-one-theming)))
#+end_src

* Local Variables                                                   :ARCHIVE:

This little block will cause the ~org-bable-tangle()~ function to run after this
file is saved.

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
